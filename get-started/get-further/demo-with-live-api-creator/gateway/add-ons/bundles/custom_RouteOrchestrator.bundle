<?xml version="1.0" encoding="UTF-8"?><l7:Bundle xmlns:l7="http://ns.l7tech.com/2010/04/gateway-management">
            <l7:References>
                <l7:Item>
                    <l7:Name>JsonJolt</l7:Name>
                    <l7:Id>3237bb87c133b82ff09f4a0b3d90a6df</l7:Id>
                    <l7:Type>SERVER_MODULE_FILE</l7:Type>
                    <l7:TimeStamp>2017-10-11T22:51:27.805Z</l7:TimeStamp>
                    <l7:Resource>
                        <l7:ServerModuleFile id="3237bb87c133b82ff09f4a0b3d90a6df" version="1">
                            <l7:Name>JsonJolt</l7:Name>
                            <l7:ModuleType>Modular Assertion</l7:ModuleType>
                            <l7:ModuleSha256>f8bc971fdce5830795d81bf7feff58c9c3e5b7198d1c521b922d14adfa8e4175</l7:ModuleSha256>
                            <l7:ModuleData></l7:ModuleData>
                            <l7:Signature>
<l7:Property key="cert">
    <l7:StringValue>MIIBdjCCARygAwIBAgIICZtYr8gahucwCQYHKoZIzj0EATAbMRkwFwYDVQQDExByb290LmFwaW0uY2EuY29tMB4XDTE1MDgwNjIzMzkxNloXDTM1MDgwNjIzMzkxNlowJDEiMCAGA1UEAxMZc2lnbmVyLnBvcnRhbC5hcGltLmNhLmNvbTBZMBMGByqGSM49AgEGCCqGSM49AwEHA0IABEh0duKx8veixVN/IDv9LYxbJG5EN02cFrXRn3M1CtxctO/jzPeZedJ70s0Nndi8DaLO7rgwEJyd+TWXZ5DoaDOjQjBAMB0GA1UdDgQWBBR/eUB5YxeAQBnXngwC8PZUA7mC+DAfBgNVHSMEGDAWgBTr9k+HhvWquHQ4/HRqhelY9+NC8DAJBgcqhkjOPQQBA0kAMEYCIQCTsunDFyIJalf495pb1WZQqZ9cGRrvJ0O8ROYeHrh3ywIhAJoYCvJN4EwqU/r47fS0H1jxlqaArZH6/bWyJY7S9Sth</l7:StringValue>
</l7:Property>
<l7:Property key="signature">
    <l7:StringValue>MEYCIQDiu+Z4axF8GMkrjS6wywJ1ds8RvpWyRwK82rld2zFr+gIhAJbMrkgX21zM4hx+cQ6ukO/HNsRcAi5GterwLUqaKW2B</l7:StringValue>
</l7:Property>
                            </l7:Signature>
                            <l7:Properties>
<l7:Property key="moduleAssertions">
    <l7:StringValue>JsonJoltAssertion</l7:StringValue>
</l7:Property>
<l7:Property key="moduleFileName">
    <l7:StringValue>JsonJoltAssertion-9.3.00-20170908.032503-152.saar </l7:StringValue>
</l7:Property>
<l7:Property key="moduleSize">
    <l7:StringValue>114550</l7:StringValue>
</l7:Property>
                            </l7:Properties>
                        </l7:ServerModuleFile>
                    </l7:Resource>
                </l7:Item>
                <l7:Item>
                    <l7:Name>custom_RouteOrchestrator</l7:Name>
                    <l7:Id>28ea4ca03442ebdf29e955290e93c968</l7:Id>
                    <l7:Type>POLICY</l7:Type>
                    <l7:TimeStamp>2017-10-11T22:51:27.866Z</l7:TimeStamp>
                    <l7:Resource>
                        <l7:Policy guid="bbf8e106-a03c-43f6-9989-a530bf365969" id="28ea4ca03442ebdf29e955290e93c968" version="9">
                            <l7:PolicyDetail folderId="d1bf78b539c944534cc5d33d1ff4fc64" guid="bbf8e106-a03c-43f6-9989-a530bf365969" id="28ea4ca03442ebdf29e955290e93c968" version="9">
<l7:Name>custom_RouteOrchestrator</l7:Name>
<l7:PolicyType>Include</l7:PolicyType>
<l7:Properties>
    <l7:Property key="revision">
        <l7:LongValue>10</l7:LongValue>
    </l7:Property>
    <l7:Property key="soap">
        <l7:BooleanValue>false</l7:BooleanValue>
    </l7:Property>
</l7:Properties>
                            </l7:PolicyDetail>
                            <l7:Resources>
<l7:ResourceSet tag="policy">
    <l7:Resource type="policy">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;wsp:Policy xmlns:L7p="http://www.layer7tech.com/ws/policy" xmlns:wsp="http://schemas.xmlsoap.org/ws/2002/12/policy"&gt;
    &lt;wsp:All wsp:Usage="Required"&gt;
        &lt;L7p:CommentAssertion&gt;
            &lt;L7p:Comment stringValue="Policy Fragment: custom_RouteOrchestrator"/&gt;
        &lt;/L7p:CommentAssertion&gt;
        &lt;L7p:CommentAssertion&gt;
            &lt;L7p:Comment stringValue="------------------------------------------------------------------------------"/&gt;
        &lt;/L7p:CommentAssertion&gt;
        &lt;L7p:HardcodedResponse&gt;
            &lt;L7p:Base64ResponseBody stringValue="JHtwcmltYXJ5Um91dGV9CiR7c2Vjb25kYXJ5Um91dGV9CiR7ZmFpbG92ZXJSb3V0ZX0="/&gt;
            &lt;L7p:EarlyResponse booleanValue="true"/&gt;
            &lt;L7p:Enabled booleanValue="false"/&gt;
            &lt;L7p:ResponseContentType stringValue="text/plain; charset=UTF-8"/&gt;
        &lt;/L7p:HardcodedResponse&gt;
        &lt;wsp:OneOrMore wsp:Usage="Required"&gt;
            &lt;L7p:CommentAssertion&gt;
                &lt;L7p:Comment stringValue="=== &amp;quot;rule&amp;quot; parameter is required ==="/&gt;
            &lt;/L7p:CommentAssertion&gt;
            &lt;wsp:All wsp:Usage="Required"&gt;
                &lt;L7p:ComparisonAssertion&gt;
                    &lt;L7p:CaseSensitive booleanValue="false"/&gt;
                    &lt;L7p:Expression1 stringValue="${rule}"/&gt;
                    &lt;L7p:Operator operatorNull="null"/&gt;
                    &lt;L7p:Predicates predicates="included"&gt;
                        &lt;L7p:item dataType="included"&gt;
                            &lt;L7p:Type variableDataType="string"/&gt;
                        &lt;/L7p:item&gt;
                        &lt;L7p:item binary="included"&gt;
                            &lt;L7p:Negated booleanValue="true"/&gt;
                            &lt;L7p:Operator operator="EMPTY"/&gt;
                            &lt;L7p:RightValue stringValue="required"/&gt;
                        &lt;/L7p:item&gt;
                    &lt;/L7p:Predicates&gt;
                &lt;/L7p:ComparisonAssertion&gt;
            &lt;/wsp:All&gt;
            &lt;wsp:All wsp:Usage="Required"&gt;
                &lt;L7p:CustomizeErrorResponse&gt;
                    &lt;L7p:Content stringValueReference="inline"&gt;&lt;![CDATA[{
  "errorMessage" : "orchestrator payload is either invalid or missing"
}]]&gt;&lt;/L7p:Content&gt;
                    &lt;L7p:ContentType stringValue="application/json"/&gt;
                    &lt;L7p:ExtraHeaders nameValuePairArray="included"/&gt;
                &lt;/L7p:CustomizeErrorResponse&gt;
                &lt;L7p:FalseAssertion/&gt;
            &lt;/wsp:All&gt;
        &lt;/wsp:OneOrMore&gt;
        &lt;wsp:All wsp:Usage="Required"&gt;
            &lt;L7p:CommentAssertion&gt;
                &lt;L7p:Comment stringValue="------------------------------------------------------------------------------"/&gt;
            &lt;/L7p:CommentAssertion&gt;
            &lt;L7p:CommentAssertion&gt;
                &lt;L7p:Comment stringValue="                 DEFINE VALUES   "/&gt;
            &lt;/L7p:CommentAssertion&gt;
            &lt;L7p:CommentAssertion&gt;
                &lt;L7p:Comment stringValue="------------------------------------------------------------------------------"/&gt;
            &lt;/L7p:CommentAssertion&gt;
            &lt;L7p:SetVariable&gt;
                &lt;L7p:AssertionComment assertionComment="included"&gt;
                    &lt;L7p:Properties mapValue="included"&gt;
                        &lt;L7p:entry&gt;
                            &lt;L7p:key stringValue="RIGHT.COMMENT"/&gt;
                            &lt;L7p:value stringValue="separator between url and queries"/&gt;
                        &lt;/L7p:entry&gt;
                    &lt;/L7p:Properties&gt;
                &lt;/L7p:AssertionComment&gt;
                &lt;L7p:Base64Expression stringValue="Pw=="/&gt;
                &lt;L7p:VariableToSet stringValue="questionMark"/&gt;
            &lt;/L7p:SetVariable&gt;
            &lt;L7p:SetVariable&gt;
                &lt;L7p:AssertionComment assertionComment="included"&gt;
                    &lt;L7p:Properties mapValue="included"&gt;
                        &lt;L7p:entry&gt;
                            &lt;L7p:key stringValue="RIGHT.COMMENT"/&gt;
                            &lt;L7p:value stringValue="aggregated data within an &amp;quot;aggregator&amp;quot;.  The aggregated data is the result of concatenation of the  routeHttp's responses  within the aggregator."/&gt;
                        &lt;/L7p:entry&gt;
                    &lt;/L7p:Properties&gt;
                &lt;/L7p:AssertionComment&gt;
                &lt;L7p:Base64Expression stringValue=""/&gt;
                &lt;L7p:VariableToSet stringValue="aggregator"/&gt;
            &lt;/L7p:SetVariable&gt;
            &lt;L7p:SetVariable&gt;
                &lt;L7p:AssertionComment assertionComment="included"&gt;
                    &lt;L7p:Properties mapValue="included"&gt;
                        &lt;L7p:entry&gt;
                            &lt;L7p:key stringValue="RIGHT.COMMENT"/&gt;
                            &lt;L7p:value stringValueReference="inline"&gt;&lt;![CDATA[orchestrated data from previous aggregators.  

- orchestrate.intermediate is data to be used/referenced in other aggregator.
- orchestrate.result is the aggregated data to be returned as part of the request's response.]]&gt;&lt;/L7p:value&gt;
                        &lt;/L7p:entry&gt;
                    &lt;/L7p:Properties&gt;
                &lt;/L7p:AssertionComment&gt;
                &lt;L7p:Base64Expression stringValue=""/&gt;
                &lt;L7p:VariableToSet stringValue="routeOrchestrator"/&gt;
            &lt;/L7p:SetVariable&gt;
            &lt;L7p:SetVariable&gt;
                &lt;L7p:AssertionComment assertionComment="included"&gt;
                    &lt;L7p:Properties mapValue="included"&gt;
                        &lt;L7p:entry&gt;
                            &lt;L7p:key stringValue="RIGHT.COMMENT"/&gt;
                            &lt;L7p:value stringValue="0 means hasn't found result_transform yet."/&gt;
                        &lt;/L7p:entry&gt;
                    &lt;/L7p:Properties&gt;
                &lt;/L7p:AssertionComment&gt;
                &lt;L7p:Base64Expression stringValue="MA=="/&gt;
                &lt;L7p:DataType variableDataType="int"/&gt;
                &lt;L7p:VariableToSet stringValue="isResultTransformed"/&gt;
            &lt;/L7p:SetVariable&gt;
            &lt;L7p:SetVariable&gt;
                &lt;L7p:AssertionComment assertionComment="included"&gt;
                    &lt;L7p:Properties mapValue="included"&gt;
                        &lt;L7p:entry&gt;
                            &lt;L7p:key stringValue="RIGHT.COMMENT"/&gt;
                            &lt;L7p:value stringValue="0 means hasn't found result_transform yet."/&gt;
                        &lt;/L7p:entry&gt;
                    &lt;/L7p:Properties&gt;
                &lt;/L7p:AssertionComment&gt;
                &lt;L7p:Base64Expression stringValue="MA=="/&gt;
                &lt;L7p:DataType variableDataType="int"/&gt;
                &lt;L7p:VariableToSet stringValue="isNonJson"/&gt;
            &lt;/L7p:SetVariable&gt;
            &lt;L7p:SetVariable&gt;
                &lt;L7p:AssertionComment assertionComment="included"&gt;
                    &lt;L7p:Properties mapValue="included"&gt;
                        &lt;L7p:entry&gt;
                            &lt;L7p:key stringValue="RIGHT.COMMENT"/&gt;
                            &lt;L7p:value stringValue="0 means hasn't found result_transform yet."/&gt;
                        &lt;/L7p:entry&gt;
                    &lt;/L7p:Properties&gt;
                &lt;/L7p:AssertionComment&gt;
                &lt;L7p:Base64Expression stringValue="MA=="/&gt;
                &lt;L7p:DataType variableDataType="int"/&gt;
                &lt;L7p:VariableToSet stringValue="isInvalidJoltOperation"/&gt;
            &lt;/L7p:SetVariable&gt;
            &lt;L7p:CommentAssertion&gt;
                &lt;L7p:Comment stringValue="------------------------------------------------------------------------------"/&gt;
            &lt;/L7p:CommentAssertion&gt;
            &lt;L7p:SetVariable&gt;
                &lt;L7p:Base64Expression stringValue="JHtydWxlfQ=="/&gt;
                &lt;L7p:ContentType stringValue="application/json; charset=utf-8"/&gt;
                &lt;L7p:DataType variableDataType="message"/&gt;
                &lt;L7p:VariableToSet stringValue="aggregatorList"/&gt;
            &lt;/L7p:SetVariable&gt;
            &lt;L7p:CommentAssertion&gt;
                &lt;L7p:Comment stringValue="------------------------------------------------------------------------------"/&gt;
            &lt;/L7p:CommentAssertion&gt;
            &lt;L7p:CommentAssertion&gt;
                &lt;L7p:Comment stringValue="                GET aggregatorList and Orchestration Rules from input"/&gt;
            &lt;/L7p:CommentAssertion&gt;
            &lt;L7p:CommentAssertion&gt;
                &lt;L7p:Comment stringValue="------------------------------------------------------------------------------"/&gt;
            &lt;/L7p:CommentAssertion&gt;
            &lt;L7p:EvaluateJsonPathExpression&gt;
                &lt;L7p:Expression stringValue="$.orchestrator[*]"/&gt;
                &lt;L7p:OtherTargetMessageVariable stringValue="aggregatorList"/&gt;
                &lt;L7p:Target target="OTHER"/&gt;
                &lt;L7p:VariablePrefix stringValue="aggregatorList"/&gt;
            &lt;/L7p:EvaluateJsonPathExpression&gt;
        &lt;/wsp:All&gt;
        &lt;L7p:CommentAssertion&gt;
            &lt;L7p:Comment stringValue="------------------------------------------------------------------------------"/&gt;
        &lt;/L7p:CommentAssertion&gt;
        &lt;L7p:CommentAssertion&gt;
            &lt;L7p:Comment stringValue="                 FOR each aggregator"/&gt;
        &lt;/L7p:CommentAssertion&gt;
        &lt;L7p:CommentAssertion&gt;
            &lt;L7p:Comment stringValue="------------------------------------------------------------------------------"/&gt;
        &lt;/L7p:CommentAssertion&gt;
        &lt;L7p:ForEachLoop L7p:Usage="Required"
            loopVariable="aggregatorList.results" variablePrefix="aggregatorLoop"&gt;
            &lt;L7p:SetVariable&gt;
                &lt;L7p:Base64Expression stringValue="JHthZ2dyZWdhdG9yTG9vcC5jdXJyZW50fQ=="/&gt;
                &lt;L7p:ContentType stringValue="application/json; charset=utf-8"/&gt;
                &lt;L7p:DataType variableDataType="message"/&gt;
                &lt;L7p:VariableToSet stringValue="aggregatorMsg"/&gt;
            &lt;/L7p:SetVariable&gt;
            &lt;wsp:OneOrMore wsp:Usage="Required"&gt;
                &lt;wsp:All wsp:Usage="Required"&gt;
                    &lt;L7p:CommentAssertion&gt;
                        &lt;L7p:Comment stringValue="------------------------------------------------------------------------------"/&gt;
                    &lt;/L7p:CommentAssertion&gt;
                    &lt;L7p:CommentAssertion&gt;
                        &lt;L7p:Comment stringValue="                Handle 'aggregator'"/&gt;
                    &lt;/L7p:CommentAssertion&gt;
                    &lt;L7p:CommentAssertion&gt;
                        &lt;L7p:Comment stringValue="------------------------------------------------------------------------------"/&gt;
                    &lt;/L7p:CommentAssertion&gt;
                    &lt;L7p:EvaluateJsonPathExpression&gt;
                        &lt;L7p:AssertionComment assertionComment="included"&gt;
                            &lt;L7p:Properties mapValue="included"&gt;
                                &lt;L7p:entry&gt;
                                    &lt;L7p:key stringValue="RIGHT.COMMENT"/&gt;
                                    &lt;L7p:value stringValue="Get 'routeList' of the current 'aggregator'"/&gt;
                                &lt;/L7p:entry&gt;
                            &lt;/L7p:Properties&gt;
                        &lt;/L7p:AssertionComment&gt;
                        &lt;L7p:Expression stringValue="$.aggregator[*]"/&gt;
                        &lt;L7p:OtherTargetMessageVariable stringValue="aggregatorMsg"/&gt;
                        &lt;L7p:Target target="OTHER"/&gt;
                        &lt;L7p:VariablePrefix stringValue="routeList"/&gt;
                    &lt;/L7p:EvaluateJsonPathExpression&gt;
                    &lt;L7p:SetVariable&gt;
                        &lt;L7p:Base64Expression stringValue=""/&gt;
                        &lt;L7p:VariableToSet stringValue="aggregator.result"/&gt;
                    &lt;/L7p:SetVariable&gt;
                    &lt;L7p:SetVariable&gt;
                        &lt;L7p:Base64Expression stringValue=""/&gt;
                        &lt;L7p:VariableToSet stringValue="routeListUrlStr"/&gt;
                    &lt;/L7p:SetVariable&gt;
                    &lt;L7p:SetVariable&gt;
                        &lt;L7p:Base64Expression stringValue=""/&gt;
                        &lt;L7p:VariableToSet stringValue="feedback.result.data"/&gt;
                    &lt;/L7p:SetVariable&gt;
                    &lt;L7p:SetVariable&gt;
                        &lt;L7p:Base64Expression stringValue=""/&gt;
                        &lt;L7p:VariableToSet stringValue="feedback.result.original"/&gt;
                    &lt;/L7p:SetVariable&gt;
                    &lt;L7p:SetVariable&gt;
                        &lt;L7p:AssertionComment assertionComment="included"&gt;
                            &lt;L7p:Properties mapValue="included"&gt;
                                &lt;L7p:entry&gt;
                                    &lt;L7p:key stringValue="RIGHT.COMMENT"/&gt;
                                    &lt;L7p:value stringValue="contains appended list of Http headers for each routeHttp"/&gt;
                                &lt;/L7p:entry&gt;
                            &lt;/L7p:Properties&gt;
                        &lt;/L7p:AssertionComment&gt;
                        &lt;L7p:Base64Expression stringValue=""/&gt;
                        &lt;L7p:VariableToSet stringValue="routeListHeadersStr"/&gt;
                    &lt;/L7p:SetVariable&gt;
                    &lt;L7p:SetVariable&gt;
                        &lt;L7p:AssertionComment assertionComment="included"&gt;
                            &lt;L7p:Properties mapValue="included"&gt;
                                &lt;L7p:entry&gt;
                                    &lt;L7p:key stringValue="RIGHT.COMMENT"/&gt;
                                    &lt;L7p:value stringValue="contains appended list of Http method for each routeHttp"/&gt;
                                &lt;/L7p:entry&gt;
                            &lt;/L7p:Properties&gt;
                        &lt;/L7p:AssertionComment&gt;
                        &lt;L7p:Base64Expression stringValue=""/&gt;
                        &lt;L7p:VariableToSet stringValue="routeListHttpMethodsStr"/&gt;
                    &lt;/L7p:SetVariable&gt;
                    &lt;L7p:SetVariable&gt;
                        &lt;L7p:AssertionComment assertionComment="included"&gt;
                            &lt;L7p:Properties mapValue="included"&gt;
                                &lt;L7p:entry&gt;
                                    &lt;L7p:key stringValue="RIGHT.COMMENT"/&gt;
                                    &lt;L7p:value stringValue="contains appended list of Http method for each routeHttp"/&gt;
                                &lt;/L7p:entry&gt;
                            &lt;/L7p:Properties&gt;
                        &lt;/L7p:AssertionComment&gt;
                        &lt;L7p:Base64Expression stringValue=""/&gt;
                        &lt;L7p:VariableToSet stringValue="routeResponseTransformsStr"/&gt;
                    &lt;/L7p:SetVariable&gt;
                    &lt;L7p:SetVariable&gt;
                        &lt;L7p:AssertionComment assertionComment="included"&gt;
                            &lt;L7p:Properties mapValue="included"&gt;
                                &lt;L7p:entry&gt;
                                    &lt;L7p:key stringValue="RIGHT.COMMENT"/&gt;
                                    &lt;L7p:value stringValue="contains appended list of Http method for each routeHttp"/&gt;
                                &lt;/L7p:entry&gt;
                            &lt;/L7p:Properties&gt;
                        &lt;/L7p:AssertionComment&gt;
                        &lt;L7p:Base64Expression stringValue=""/&gt;
                        &lt;L7p:VariableToSet stringValue="routeRequestTransformsStr"/&gt;
                    &lt;/L7p:SetVariable&gt;
                    &lt;L7p:CommentAssertion&gt;
                        &lt;L7p:Comment stringValue="------------------------------------------------------------------------------"/&gt;
                    &lt;/L7p:CommentAssertion&gt;
                    &lt;L7p:CommentAssertion&gt;
                        &lt;L7p:Comment stringValue="                PARSE Routing Data within each 'aggregator'"/&gt;
                    &lt;/L7p:CommentAssertion&gt;
                    &lt;L7p:CommentAssertion&gt;
                        &lt;L7p:Comment stringValue="------------------------------------------------------------------------------"/&gt;
                    &lt;/L7p:CommentAssertion&gt;
                    &lt;L7p:ForEachLoop L7p:Usage="Required"
                        loopVariable="routeList.results" variablePrefix="routeLoop"&gt;
                        &lt;L7p:CommentAssertion&gt;
                            &lt;L7p:Comment stringValue="------------------------------------------------------------------------------"/&gt;
                        &lt;/L7p:CommentAssertion&gt;
                        &lt;L7p:CommentAssertion&gt;
                            &lt;L7p:Comment stringValue="                 Build full Url"/&gt;
                        &lt;/L7p:CommentAssertion&gt;
                        &lt;L7p:CommentAssertion&gt;
                            &lt;L7p:Comment stringValue="------------------------------------------------------------------------------"/&gt;
                        &lt;/L7p:CommentAssertion&gt;
                        &lt;wsp:All wsp:Usage="Required"&gt;
                            &lt;L7p:SetVariable&gt;
                                &lt;L7p:Base64Expression stringValue="JHtyb3V0ZUxvb3AuY3VycmVudH0="/&gt;
                                &lt;L7p:ContentType stringValue="application/json; charset=utf-8"/&gt;
                                &lt;L7p:DataType variableDataType="message"/&gt;
                                &lt;L7p:VariableToSet stringValue="routeMsg"/&gt;
                            &lt;/L7p:SetVariable&gt;
                            &lt;wsp:OneOrMore wsp:Usage="Required"&gt;
                                &lt;L7p:EvaluateJsonPathExpression&gt;
                                    &lt;L7p:AssertionComment assertionComment="included"&gt;
                                    &lt;L7p:Properties mapValue="included"&gt;
                                    &lt;L7p:entry&gt;
                                    &lt;L7p:key stringValue="RIGHT.COMMENT"/&gt;
                                    &lt;L7p:value stringValue="Get 'routeIUrl' from each routeHttp"/&gt;
                                    &lt;/L7p:entry&gt;
                                    &lt;/L7p:Properties&gt;
                                    &lt;/L7p:AssertionComment&gt;
                                    &lt;L7p:Expression stringValue="$.RouteHttp.targetUrl"/&gt;
                                    &lt;L7p:OtherTargetMessageVariable stringValue="routeMsg"/&gt;
                                    &lt;L7p:Target target="OTHER"/&gt;
                                    &lt;L7p:VariablePrefix stringValue="routeUrl"/&gt;
                                &lt;/L7p:EvaluateJsonPathExpression&gt;
                                &lt;wsp:All wsp:Usage="Required"&gt;
                                    &lt;L7p:CustomizeErrorResponse&gt;
                                    &lt;L7p:Content stringValueReference="inline"&gt;&lt;![CDATA[{
  "errorMessage" : "Unrecognized data object within the 'orchestrator'. Expected 'targetUrl'."
}]]&gt;&lt;/L7p:Content&gt;
                                    &lt;L7p:ContentType stringValue="application/json"/&gt;
                                    &lt;L7p:ExtraHeaders nameValuePairArray="included"/&gt;
                                    &lt;/L7p:CustomizeErrorResponse&gt;
                                    &lt;L7p:FalseAssertion/&gt;
                                &lt;/wsp:All&gt;
                            &lt;/wsp:OneOrMore&gt;
                            &lt;wsp:OneOrMore wsp:Usage="Required"&gt;
                                &lt;wsp:All wsp:Usage="Required"&gt;
                                    &lt;L7p:ComparisonAssertion&gt;
                                    &lt;L7p:CaseSensitive booleanValue="false"/&gt;
                                    &lt;L7p:Expression1 stringValue="${routeUrl.result}"/&gt;
                                    &lt;L7p:Operator operatorNull="null"/&gt;
                                    &lt;L7p:Predicates predicates="included"&gt;
                                    &lt;L7p:item dataType="included"&gt;
                                    &lt;L7p:Type variableDataType="string"/&gt;
                                    &lt;/L7p:item&gt;
                                    &lt;L7p:item binary="included"&gt;
                                    &lt;L7p:Negated booleanValue="true"/&gt;
                                    &lt;L7p:RightValue stringValue="null"/&gt;
                                    &lt;/L7p:item&gt;
                                    &lt;L7p:item binary="included"&gt;
                                    &lt;L7p:Negated booleanValue="true"/&gt;
                                    &lt;L7p:Operator operator="EMPTY"/&gt;
                                    &lt;L7p:RightValue stringValue=""/&gt;
                                    &lt;/L7p:item&gt;
                                    &lt;/L7p:Predicates&gt;
                                    &lt;/L7p:ComparisonAssertion&gt;
                                    &lt;L7p:SetVariable&gt;
                                    &lt;L7p:Base64Expression stringValue="JHtyb3V0ZU1zZ30="/&gt;
                                    &lt;L7p:ContentType stringValue="application/json; charset=utf-8"/&gt;
                                    &lt;L7p:DataType variableDataType="message"/&gt;
                                    &lt;L7p:VariableToSet stringValue="routeParameterTransform"/&gt;
                                    &lt;/L7p:SetVariable&gt;
                                    &lt;L7p:JsonJolt&gt;
                                    &lt;L7p:AssertionComment assertionComment="included"&gt;
                                    &lt;L7p:Properties mapValue="included"&gt;
                                    &lt;L7p:entry&gt;
                                    &lt;L7p:key stringValue="RIGHT.COMMENT"/&gt;
                                    &lt;L7p:value stringValue="         Get 'routeParameter' from RouteHttp"/&gt;
                                    &lt;/L7p:entry&gt;
                                    &lt;/L7p:Properties&gt;
                                    &lt;/L7p:AssertionComment&gt;
                                    &lt;L7p:OtherTargetMessageVariable stringValue="routeParameterTransform"/&gt;
                                    &lt;L7p:SchemaExpression stringValueReference="inline"&gt;&lt;![CDATA[[{
  "operation": "shift",
  "spec": {
    "RouteHttp": {
      "parameters": ""
    }
  }
}]]]&gt;&lt;/L7p:SchemaExpression&gt;
                                    &lt;L7p:Target target="OTHER"/&gt;
                                    &lt;/L7p:JsonJolt&gt;
                                    &lt;wsp:OneOrMore wsp:Usage="Required"&gt;
                                    &lt;wsp:All wsp:Usage="Required"&gt;
                                    &lt;L7p:ComparisonAssertion&gt;
                                    &lt;L7p:CaseSensitive booleanValue="false"/&gt;
                                    &lt;L7p:Expression1 stringValue="${routeParameterTransform.mainpart}"/&gt;
                                    &lt;L7p:Operator operatorNull="null"/&gt;
                                    &lt;L7p:Predicates predicates="included"&gt;
                                    &lt;L7p:item dataType="included"&gt;
                                    &lt;L7p:Type variableDataType="string"/&gt;
                                    &lt;/L7p:item&gt;
                                    &lt;L7p:item binary="included"&gt;
                                    &lt;L7p:RightValue stringValue="null"/&gt;
                                    &lt;/L7p:item&gt;
                                    &lt;/L7p:Predicates&gt;
                                    &lt;/L7p:ComparisonAssertion&gt;
                                    &lt;L7p:CustomizeErrorResponse&gt;
                                    &lt;L7p:Content stringValueReference="inline"&gt;&lt;![CDATA[{
  "errorMessage" : "Unrecognized data object within the 'orchestrator'.  Expected 'parameters'"
}]]&gt;&lt;/L7p:Content&gt;
                                    &lt;L7p:ContentType stringValue="application/json"/&gt;
                                    &lt;L7p:ExtraHeaders nameValuePairArray="included"/&gt;
                                    &lt;/L7p:CustomizeErrorResponse&gt;
                                    &lt;L7p:FalseAssertion/&gt;
                                    &lt;/wsp:All&gt;
                                    &lt;L7p:TrueAssertion/&gt;
                                    &lt;/wsp:OneOrMore&gt;
                                    &lt;L7p:CommentAssertion&gt;
                                    &lt;L7p:Comment stringValue="------------------------------------------------------------------------------"/&gt;
                                    &lt;/L7p:CommentAssertion&gt;
                                    &lt;L7p:CommentAssertion&gt;
                                    &lt;L7p:Comment stringValue="                Processing PARAMETERs"/&gt;
                                    &lt;/L7p:CommentAssertion&gt;
                                    &lt;L7p:CommentAssertion&gt;
                                    &lt;L7p:Comment stringValue="------------------------------------------------------------------------------"/&gt;
                                    &lt;/L7p:CommentAssertion&gt;
                                    &lt;L7p:SetVariable&gt;
                                    &lt;L7p:AssertionComment assertionComment="included"&gt;
                                    &lt;L7p:Properties mapValue="included"&gt;
                                    &lt;L7p:entry&gt;
                                    &lt;L7p:key stringValue="RIGHT.COMMENT"/&gt;
                                    &lt;L7p:value stringValue="Initializing ${orchestratorQuery} to ''.  It will hold the orchestrator parameters later"/&gt;
                                    &lt;/L7p:entry&gt;
                                    &lt;/L7p:Properties&gt;
                                    &lt;/L7p:AssertionComment&gt;
                                    &lt;L7p:Base64Expression stringValue=""/&gt;
                                    &lt;L7p:VariableToSet stringValue="orchestratorQuery"/&gt;
                                    &lt;/L7p:SetVariable&gt;
                                    &lt;L7p:SetVariable&gt;
                                    &lt;L7p:Base64Expression stringValue="JHtyb3V0ZVBhcmFtZXRlclRyYW5zZm9ybS5tYWlucGFydH0="/&gt;
                                    &lt;L7p:ContentType stringValue="application/json; charset=utf-8"/&gt;
                                    &lt;L7p:DataType variableDataType="message"/&gt;
                                    &lt;L7p:VariableToSet stringValue="orchestratorParameterVarList"/&gt;
                                    &lt;/L7p:SetVariable&gt;
                                    &lt;L7p:EvaluateJsonPathExpression&gt;
                                    &lt;L7p:AssertionComment assertionComment="included"&gt;
                                    &lt;L7p:Properties mapValue="included"&gt;
                                    &lt;L7p:entry&gt;
                                    &lt;L7p:key stringValue="RIGHT.COMMENT"/&gt;
                                    &lt;L7p:value stringValue="Parse Json into orchestrator_var_list_msg"/&gt;
                                    &lt;/L7p:entry&gt;
                                    &lt;/L7p:Properties&gt;
                                    &lt;/L7p:AssertionComment&gt;
                                    &lt;L7p:Expression stringValue="$."/&gt;
                                    &lt;L7p:OtherTargetMessageVariable stringValue="orchestratorParameterVarList"/&gt;
                                    &lt;L7p:Target target="OTHER"/&gt;
                                    &lt;L7p:VariablePrefix stringValue="orchestrator_var_list_msg"/&gt;
                                    &lt;/L7p:EvaluateJsonPathExpression&gt;
                                    &lt;L7p:CommentAssertion&gt;
                                    &lt;L7p:Comment stringValue="------------------------------------------------------------------------------"/&gt;
                                    &lt;/L7p:CommentAssertion&gt;
                                    &lt;L7p:CommentAssertion&gt;
                                    &lt;L7p:Comment stringValue="                FOR each parameter"/&gt;
                                    &lt;/L7p:CommentAssertion&gt;
                                    &lt;L7p:CommentAssertion&gt;
                                    &lt;L7p:Comment stringValue="                        CHECK Parameters that reference 'orchestrator.intermediate' or 'orchestrator.result'"/&gt;
                                    &lt;/L7p:CommentAssertion&gt;
                                    &lt;L7p:CommentAssertion&gt;
                                    &lt;L7p:Comment stringValue="------------------------------------------------------------------------------"/&gt;
                                    &lt;/L7p:CommentAssertion&gt;
                                    &lt;L7p:ForEachLoop
                                    L7p:Usage="Required"
                                    loopVariable="orchestrator_var_list_msg.results" variablePrefix="orchestrator_var_item"&gt;
                                    &lt;L7p:SetVariable&gt;
                                    &lt;L7p:Base64Expression stringValue="JHtvcmNoZXN0cmF0b3JfdmFyX2l0ZW0uY3VycmVudH0="/&gt;
                                    &lt;L7p:VariableToSet stringValue="orchestratorRefStr"/&gt;
                                    &lt;/L7p:SetVariable&gt;
                                    &lt;L7p:SetVariable&gt;
                                    &lt;L7p:AssertionComment assertionComment="included"&gt;
                                    &lt;L7p:Properties mapValue="included"&gt;
                                    &lt;L7p:entry&gt;
                                    &lt;L7p:key stringValue="RIGHT.COMMENT"/&gt;
                                    &lt;L7p:value stringValue="set to 1 if the parameter does not reference orchestrator.intermediate or orchestrator.result data"/&gt;
                                    &lt;/L7p:entry&gt;
                                    &lt;/L7p:Properties&gt;
                                    &lt;/L7p:AssertionComment&gt;
                                    &lt;L7p:Base64Expression stringValue="MA=="/&gt;
                                    &lt;L7p:DataType variableDataType="int"/&gt;
                                    &lt;L7p:VariableToSet stringValue="non_orchestratorParam"/&gt;
                                    &lt;/L7p:SetVariable&gt;
                                    &lt;wsp:OneOrMore wsp:Usage="Required"&gt;
                                    &lt;L7p:ComparisonAssertion&gt;
                                    &lt;L7p:CaseSensitive booleanValue="false"/&gt;
                                    &lt;L7p:Expression1 stringValue="${orchestratorRefStr}"/&gt;
                                    &lt;L7p:Operator operatorNull="null"/&gt;
                                    &lt;L7p:Predicates predicates="included"&gt;
                                    &lt;L7p:item dataType="included"&gt;
                                    &lt;L7p:Type variableDataType="string"/&gt;
                                    &lt;/L7p:item&gt;
                                    &lt;L7p:item binary="included"&gt;
                                    &lt;L7p:Negated booleanValue="true"/&gt;
                                    &lt;L7p:RightValue stringValue="null"/&gt;
                                    &lt;/L7p:item&gt;
                                    &lt;L7p:item binary="included"&gt;
                                    &lt;L7p:Negated booleanValue="true"/&gt;
                                    &lt;L7p:Operator operator="EMPTY"/&gt;
                                    &lt;L7p:RightValue stringValue=""/&gt;
                                    &lt;/L7p:item&gt;
                                    &lt;L7p:item binary="included"&gt;
                                    &lt;L7p:Operator operator="CONTAINS"/&gt;
                                    &lt;L7p:RightValue stringValue="@##@{orchestrator.intermediate"/&gt;
                                    &lt;/L7p:item&gt;
                                    &lt;/L7p:Predicates&gt;
                                    &lt;/L7p:ComparisonAssertion&gt;
                                    &lt;L7p:ComparisonAssertion&gt;
                                    &lt;L7p:CaseSensitive booleanValue="false"/&gt;
                                    &lt;L7p:Expression1 stringValue="${orchestratorRefStr}"/&gt;
                                    &lt;L7p:Operator operatorNull="null"/&gt;
                                    &lt;L7p:Predicates predicates="included"&gt;
                                    &lt;L7p:item dataType="included"&gt;
                                    &lt;L7p:Type variableDataType="string"/&gt;
                                    &lt;/L7p:item&gt;
                                    &lt;L7p:item binary="included"&gt;
                                    &lt;L7p:Negated booleanValue="true"/&gt;
                                    &lt;L7p:RightValue stringValue="null"/&gt;
                                    &lt;/L7p:item&gt;
                                    &lt;L7p:item binary="included"&gt;
                                    &lt;L7p:Negated booleanValue="true"/&gt;
                                    &lt;L7p:Operator operator="EMPTY"/&gt;
                                    &lt;L7p:RightValue stringValue=""/&gt;
                                    &lt;/L7p:item&gt;
                                    &lt;L7p:item binary="included"&gt;
                                    &lt;L7p:Operator operator="CONTAINS"/&gt;
                                    &lt;L7p:RightValue stringValue="@##@{orchestrator.result"/&gt;
                                    &lt;/L7p:item&gt;
                                    &lt;/L7p:Predicates&gt;
                                    &lt;/L7p:ComparisonAssertion&gt;
                                    &lt;L7p:ComparisonAssertion&gt;
                                    &lt;L7p:CaseSensitive booleanValue="false"/&gt;
                                    &lt;L7p:Expression1 stringValue="${orchestratorRefStr}"/&gt;
                                    &lt;L7p:Operator operatorNull="null"/&gt;
                                    &lt;L7p:Predicates predicates="included"&gt;
                                    &lt;L7p:item dataType="included"&gt;
                                    &lt;L7p:Type variableDataType="string"/&gt;
                                    &lt;/L7p:item&gt;
                                    &lt;L7p:item binary="included"&gt;
                                    &lt;L7p:Negated booleanValue="true"/&gt;
                                    &lt;L7p:RightValue stringValue="null"/&gt;
                                    &lt;/L7p:item&gt;
                                    &lt;L7p:item binary="included"&gt;
                                    &lt;L7p:Negated booleanValue="true"/&gt;
                                    &lt;L7p:Operator operator="EMPTY"/&gt;
                                    &lt;L7p:RightValue stringValue=""/&gt;
                                    &lt;/L7p:item&gt;
                                    &lt;L7p:item binary="included"&gt;
                                    &lt;L7p:Operator operator="CONTAINS"/&gt;
                                    &lt;L7p:RightValue stringValue="@&amp;lt;&gt;@{orchestrator.result"/&gt;
                                    &lt;/L7p:item&gt;
                                    &lt;/L7p:Predicates&gt;
                                    &lt;/L7p:ComparisonAssertion&gt;
                                    &lt;wsp:All wsp:Usage="Required"&gt;
                                    &lt;wsp:OneOrMore wsp:Usage="Required"&gt;
                                    &lt;wsp:All wsp:Usage="Required"&gt;
                                    &lt;L7p:ComparisonAssertion&gt;

                                    &lt;L7p:CaseSensitive booleanValue="false"/&gt;

                                    &lt;L7p:Expression1 stringValue="${orchestratorQuery}"/&gt;

                                    &lt;L7p:Operator operatorNull="null"/&gt;

                                    &lt;L7p:Predicates predicates="included"&gt;

                                    &lt;L7p:item dataType="included"&gt;

                                    &lt;L7p:Type variableDataType="string"/&gt;
                                    &lt;/L7p:item&gt;

                                    &lt;L7p:item binary="included"&gt;

                                    &lt;L7p:Negated booleanValue="true"/&gt;

                                    &lt;L7p:Operator operator="EMPTY"/&gt;

                                    &lt;L7p:RightValue stringValue=""/&gt;
                                    &lt;/L7p:item&gt;
                                    &lt;/L7p:Predicates&gt;
                                    &lt;/L7p:ComparisonAssertion&gt;
                                    &lt;L7p:SetVariable&gt;

                                    &lt;L7p:Base64Expression stringValue="JHtvcmNoZXN0cmF0b3JRdWVyeX0sJHtvcmNoZXN0cmF0b3JSZWZTdHJ9"/&gt;

                                    &lt;L7p:VariableToSet stringValue="orchestratorQuery"/&gt;
                                    &lt;/L7p:SetVariable&gt;
                                    &lt;/wsp:All&gt;
                                    &lt;wsp:All wsp:Usage="Required"&gt;
                                    &lt;L7p:SetVariable&gt;

                                    &lt;L7p:Base64Expression stringValue="JHtvcmNoZXN0cmF0b3JSZWZTdHJ9"/&gt;

                                    &lt;L7p:VariableToSet stringValue="orchestratorQuery"/&gt;
                                    &lt;/L7p:SetVariable&gt;
                                    &lt;/wsp:All&gt;
                                    &lt;/wsp:OneOrMore&gt;
                                    &lt;L7p:SetVariable&gt;

                                    &lt;L7p:AssertionComment assertionComment="included"&gt;
                                    &lt;L7p:Properties mapValue="included"&gt;
                                    &lt;L7p:entry&gt;
                                    &lt;L7p:key stringValue="RIGHT.COMMENT"/&gt;

                                    &lt;L7p:value stringValue="set to 1 means parameter DOES NOT referencing ${orchestrator.intermediate} or ${orchestrator.result}"/&gt;
                                    &lt;/L7p:entry&gt;
                                    &lt;/L7p:Properties&gt;
                                    &lt;/L7p:AssertionComment&gt;

                                    &lt;L7p:Base64Expression stringValue="MQ=="/&gt;
                                    &lt;L7p:DataType variableDataType="int"/&gt;
                                    &lt;L7p:VariableToSet stringValue="non_orchestratorParam"/&gt;
                                    &lt;/L7p:SetVariable&gt;
                                    &lt;/wsp:All&gt;
                                    &lt;/wsp:OneOrMore&gt;
                                    &lt;wsp:OneOrMore wsp:Usage="Required"&gt;
                                    &lt;wsp:All wsp:Usage="Required"&gt;
                                    &lt;L7p:ComparisonAssertion&gt;
                                    &lt;L7p:CaseSensitive booleanValue="false"/&gt;
                                    &lt;L7p:Expression1 stringValue="${non_orchestratorParam}"/&gt;
                                    &lt;L7p:Operator operatorNull="null"/&gt;
                                    &lt;L7p:Predicates predicates="included"&gt;
                                    &lt;L7p:item dataType="included"&gt;
                                    &lt;L7p:Type variableDataType="int"/&gt;
                                    &lt;/L7p:item&gt;
                                    &lt;L7p:item binary="included"&gt;

                                    &lt;L7p:RightValue stringValue="0"/&gt;
                                    &lt;/L7p:item&gt;
                                    &lt;/L7p:Predicates&gt;
                                    &lt;/L7p:ComparisonAssertion&gt;
                                    &lt;wsp:OneOrMore wsp:Usage="Required"&gt;
                                    &lt;wsp:All wsp:Usage="Required"&gt;
                                    &lt;L7p:ComparisonAssertion&gt;

                                    &lt;L7p:CaseSensitive booleanValue="false"/&gt;

                                    &lt;L7p:Expression1 stringValue="${orchestratorRefStr}"/&gt;

                                    &lt;L7p:Operator operatorNull="null"/&gt;

                                    &lt;L7p:Predicates predicates="included"&gt;

                                    &lt;L7p:item dataType="included"&gt;

                                    &lt;L7p:Type variableDataType="string"/&gt;
                                    &lt;/L7p:item&gt;

                                    &lt;L7p:item binary="included"&gt;

                                    &lt;L7p:Negated booleanValue="true"/&gt;

                                    &lt;L7p:RightValue stringValue="null"/&gt;
                                    &lt;/L7p:item&gt;

                                    &lt;L7p:item binary="included"&gt;

                                    &lt;L7p:Negated booleanValue="true"/&gt;

                                    &lt;L7p:Operator operator="EMPTY"/&gt;

                                    &lt;L7p:RightValue stringValue=""/&gt;
                                    &lt;/L7p:item&gt;

                                    &lt;L7p:item binary="included"&gt;

                                    &lt;L7p:Operator operator="CONTAINS"/&gt;

                                    &lt;L7p:RightValue stringValue="@##@{orchestrator.intermediate"/&gt;
                                    &lt;/L7p:item&gt;
                                    &lt;/L7p:Predicates&gt;
                                    &lt;/L7p:ComparisonAssertion&gt;
                                    &lt;L7p:Regex&gt;

                                    &lt;L7p:AssertionComment assertionComment="included"&gt;

                                    &lt;L7p:Properties mapValue="included"&gt;
                                    &lt;L7p:entry&gt;

                                    &lt;L7p:key stringValue="RIGHT.COMMENT"/&gt;

                                    &lt;L7p:value stringValue="Extract the partial 'Json Path' expression from 'orchestratorRefStr' -- &gt; regular expression result will be in &amp;quot;output[1]&amp;quot;"/&gt;
                                    &lt;/L7p:entry&gt;
                                    &lt;/L7p:Properties&gt;
                                    &lt;/L7p:AssertionComment&gt;

                                    &lt;L7p:AutoTarget booleanValue="false"/&gt;

                                    &lt;L7p:CaptureVar stringValue="output"/&gt;

                                    &lt;L7p:OtherTargetMessageVariable stringValue="orchestratorRefStr"/&gt;
                                    &lt;L7p:Regex stringValue="(?&amp;lt;=@##@\{orchestrator.intermediate.).*?(?=\}\&amp;quot;\})"/&gt;

                                    &lt;L7p:Replacement stringValue=""/&gt;
                                    &lt;L7p:Target target="OTHER"/&gt;
                                    &lt;/L7p:Regex&gt;
                                    &lt;/wsp:All&gt;
                                    &lt;wsp:All wsp:Usage="Required"&gt;
                                    &lt;L7p:ComparisonAssertion&gt;

                                    &lt;L7p:CaseSensitive booleanValue="false"/&gt;

                                    &lt;L7p:Expression1 stringValue="${orchestratorRefStr}"/&gt;

                                    &lt;L7p:Operator operatorNull="null"/&gt;

                                    &lt;L7p:Predicates predicates="included"&gt;

                                    &lt;L7p:item dataType="included"&gt;

                                    &lt;L7p:Type variableDataType="string"/&gt;
                                    &lt;/L7p:item&gt;

                                    &lt;L7p:item binary="included"&gt;

                                    &lt;L7p:Negated booleanValue="true"/&gt;

                                    &lt;L7p:RightValue stringValue="null"/&gt;
                                    &lt;/L7p:item&gt;

                                    &lt;L7p:item binary="included"&gt;

                                    &lt;L7p:Negated booleanValue="true"/&gt;

                                    &lt;L7p:Operator operator="EMPTY"/&gt;

                                    &lt;L7p:RightValue stringValue=""/&gt;
                                    &lt;/L7p:item&gt;

                                    &lt;L7p:item binary="included"&gt;

                                    &lt;L7p:Operator operator="CONTAINS"/&gt;

                                    &lt;L7p:RightValue stringValue="@##@{orchestrator.result"/&gt;
                                    &lt;/L7p:item&gt;
                                    &lt;/L7p:Predicates&gt;
                                    &lt;/L7p:ComparisonAssertion&gt;
                                    &lt;L7p:Regex&gt;

                                    &lt;L7p:AssertionComment assertionComment="included"&gt;

                                    &lt;L7p:Properties mapValue="included"&gt;
                                    &lt;L7p:entry&gt;

                                    &lt;L7p:key stringValue="RIGHT.COMMENT"/&gt;

                                    &lt;L7p:value stringValue="Extract the partial 'Json Path' expression from 'orchestratorRefStr' -- &gt; regular expression result will be in &amp;quot;output[1]&amp;quot;"/&gt;
                                    &lt;/L7p:entry&gt;
                                    &lt;/L7p:Properties&gt;
                                    &lt;/L7p:AssertionComment&gt;

                                    &lt;L7p:AutoTarget booleanValue="false"/&gt;

                                    &lt;L7p:CaptureVar stringValue="output"/&gt;

                                    &lt;L7p:OtherTargetMessageVariable stringValue="orchestratorRefStr"/&gt;
                                    &lt;L7p:Regex stringValue="(?&amp;lt;=@##@\{orchestrator.result.).*?(?=\}\&amp;quot;\})"/&gt;

                                    &lt;L7p:Replacement stringValue=""/&gt;
                                    &lt;L7p:Target target="OTHER"/&gt;
                                    &lt;/L7p:Regex&gt;
                                    &lt;/wsp:All&gt;
                                    &lt;wsp:All wsp:Usage="Required"&gt;
                                    &lt;L7p:ComparisonAssertion&gt;

                                    &lt;L7p:CaseSensitive booleanValue="false"/&gt;

                                    &lt;L7p:Expression1 stringValue="${orchestratorRefStr}"/&gt;

                                    &lt;L7p:Operator operatorNull="null"/&gt;

                                    &lt;L7p:Predicates predicates="included"&gt;

                                    &lt;L7p:item dataType="included"&gt;

                                    &lt;L7p:Type variableDataType="string"/&gt;
                                    &lt;/L7p:item&gt;

                                    &lt;L7p:item binary="included"&gt;

                                    &lt;L7p:Negated booleanValue="true"/&gt;

                                    &lt;L7p:RightValue stringValue="null"/&gt;
                                    &lt;/L7p:item&gt;

                                    &lt;L7p:item binary="included"&gt;

                                    &lt;L7p:Negated booleanValue="true"/&gt;

                                    &lt;L7p:Operator operator="EMPTY"/&gt;

                                    &lt;L7p:RightValue stringValue=""/&gt;
                                    &lt;/L7p:item&gt;

                                    &lt;L7p:item binary="included"&gt;

                                    &lt;L7p:Operator operator="CONTAINS"/&gt;

                                    &lt;L7p:RightValue stringValue="@&amp;lt;&gt;@{orchestrator.result"/&gt;
                                    &lt;/L7p:item&gt;
                                    &lt;/L7p:Predicates&gt;
                                    &lt;/L7p:ComparisonAssertion&gt;
                                    &lt;L7p:Regex&gt;

                                    &lt;L7p:AssertionComment assertionComment="included"&gt;

                                    &lt;L7p:Properties mapValue="included"&gt;
                                    &lt;L7p:entry&gt;

                                    &lt;L7p:key stringValue="RIGHT.COMMENT"/&gt;

                                    &lt;L7p:value stringValue="Extract the partial 'Json Path' expression from 'orchestratorRefStr' -- &gt; regular expression result will be in &amp;quot;output[1]&amp;quot;"/&gt;
                                    &lt;/L7p:entry&gt;
                                    &lt;/L7p:Properties&gt;
                                    &lt;/L7p:AssertionComment&gt;

                                    &lt;L7p:AutoTarget booleanValue="false"/&gt;

                                    &lt;L7p:CaptureVar stringValue="output"/&gt;

                                    &lt;L7p:OtherTargetMessageVariable stringValue="orchestratorRefStr"/&gt;
                                    &lt;L7p:Regex stringValue="(?&amp;lt;=@&amp;lt;&gt;@\{orchestrator.result.).*?(?=\}\&amp;quot;\})"/&gt;

                                    &lt;L7p:Replacement stringValue=""/&gt;
                                    &lt;L7p:Target target="OTHER"/&gt;
                                    &lt;/L7p:Regex&gt;
                                    &lt;/wsp:All&gt;
                                    &lt;/wsp:OneOrMore&gt;
                                    &lt;L7p:SetVariable&gt;

                                    &lt;L7p:Base64Expression stringValue="JC4ke291dHB1dFswXX0="/&gt;
                                    &lt;L7p:VariableToSet stringValue="orchestratorRef"/&gt;
                                    &lt;/L7p:SetVariable&gt;
                                    &lt;wsp:OneOrMore wsp:Usage="Required"&gt;
                                    &lt;wsp:All wsp:Usage="Required"&gt;
                                    &lt;L7p:ComparisonAssertion&gt;

                                    &lt;L7p:CaseSensitive booleanValue="false"/&gt;

                                    &lt;L7p:Expression1 stringValue="${orchestratorRefStr}"/&gt;

                                    &lt;L7p:Operator operatorNull="null"/&gt;

                                    &lt;L7p:Predicates predicates="included"&gt;

                                    &lt;L7p:item dataType="included"&gt;

                                    &lt;L7p:Type variableDataType="string"/&gt;
                                    &lt;/L7p:item&gt;

                                    &lt;L7p:item binary="included"&gt;

                                    &lt;L7p:Negated booleanValue="true"/&gt;

                                    &lt;L7p:RightValue stringValue="null"/&gt;
                                    &lt;/L7p:item&gt;

                                    &lt;L7p:item binary="included"&gt;

                                    &lt;L7p:Negated booleanValue="true"/&gt;

                                    &lt;L7p:Operator operator="EMPTY"/&gt;

                                    &lt;L7p:RightValue stringValue=""/&gt;
                                    &lt;/L7p:item&gt;

                                    &lt;L7p:item binary="included"&gt;

                                    &lt;L7p:Operator operator="CONTAINS"/&gt;

                                    &lt;L7p:RightValue stringValue="@##@{orchestrator.intermediate"/&gt;
                                    &lt;/L7p:item&gt;
                                    &lt;/L7p:Predicates&gt;
                                    &lt;/L7p:ComparisonAssertion&gt;
                                    &lt;L7p:SetVariable&gt;

                                    &lt;L7p:Base64Expression stringValue="JHtvcmNoZXN0cmF0b3IuaW50ZXJtZWRpYXRlfQ=="/&gt;

                                    &lt;L7p:ContentType stringValue="application/json; charset=utf-8"/&gt;

                                    &lt;L7p:DataType variableDataType="message"/&gt;

                                    &lt;L7p:VariableToSet stringValue="orchestratorDataMsg"/&gt;
                                    &lt;/L7p:SetVariable&gt;
                                    &lt;/wsp:All&gt;
                                    &lt;wsp:All wsp:Usage="Required"&gt;
                                    &lt;L7p:ComparisonAssertion&gt;

                                    &lt;L7p:CaseSensitive booleanValue="false"/&gt;

                                    &lt;L7p:Expression1 stringValue="${orchestratorRefStr}"/&gt;

                                    &lt;L7p:Operator operatorNull="null"/&gt;

                                    &lt;L7p:Predicates predicates="included"&gt;

                                    &lt;L7p:item dataType="included"&gt;

                                    &lt;L7p:Type variableDataType="string"/&gt;
                                    &lt;/L7p:item&gt;

                                    &lt;L7p:item binary="included"&gt;

                                    &lt;L7p:Negated booleanValue="true"/&gt;

                                    &lt;L7p:RightValue stringValue="null"/&gt;
                                    &lt;/L7p:item&gt;

                                    &lt;L7p:item binary="included"&gt;

                                    &lt;L7p:Negated booleanValue="true"/&gt;

                                    &lt;L7p:Operator operator="EMPTY"/&gt;

                                    &lt;L7p:RightValue stringValue=""/&gt;
                                    &lt;/L7p:item&gt;

                                    &lt;L7p:item binary="included"&gt;

                                    &lt;L7p:Operator operator="CONTAINS"/&gt;

                                    &lt;L7p:RightValue stringValue="@##@{orchestrator.result"/&gt;
                                    &lt;/L7p:item&gt;
                                    &lt;/L7p:Predicates&gt;
                                    &lt;/L7p:ComparisonAssertion&gt;
                                    &lt;L7p:SetVariable&gt;

                                    &lt;L7p:Base64Expression stringValue="JHtvcmNoZXN0cmF0b3IucmVzdWx0fQ=="/&gt;

                                    &lt;L7p:ContentType stringValue="application/json; charset=utf-8"/&gt;

                                    &lt;L7p:DataType variableDataType="message"/&gt;

                                    &lt;L7p:VariableToSet stringValue="orchestratorDataMsg"/&gt;
                                    &lt;/L7p:SetVariable&gt;
                                    &lt;/wsp:All&gt;
                                    &lt;L7p:SetVariable&gt;

                                    &lt;L7p:Base64Expression stringValue="JHtvcmNoZXN0cmF0b3JSZWZTdHJ9"/&gt;
                                    &lt;L7p:ContentType stringValue="application/json; charset=utf-8"/&gt;
                                    &lt;L7p:DataType variableDataType="message"/&gt;

                                    &lt;L7p:VariableToSet stringValue="orchestratorDataMsg"/&gt;
                                    &lt;/L7p:SetVariable&gt;
                                    &lt;/wsp:OneOrMore&gt;
                                    &lt;L7p:EvaluateJsonPathExpression&gt;

                                    &lt;L7p:AssertionComment assertionComment="included"&gt;
                                    &lt;L7p:Properties mapValue="included"&gt;
                                    &lt;L7p:entry&gt;
                                    &lt;L7p:key stringValue="RIGHT.COMMENT"/&gt;

                                    &lt;L7p:value stringValue="Apply to ${orchestratorRef} onto the ${orchestrator.intermediate...} OR ${orchestrator.result} data to get the actual parameter value OUTPUT saved to ${orchestratorValue}"/&gt;
                                    &lt;/L7p:entry&gt;
                                    &lt;/L7p:Properties&gt;
                                    &lt;/L7p:AssertionComment&gt;
                                    &lt;L7p:Expression stringValue="${orchestratorRef}"/&gt;

                                    &lt;L7p:OtherTargetMessageVariable stringValue="orchestratorDataMsg"/&gt;
                                    &lt;L7p:Target target="OTHER"/&gt;
                                    &lt;L7p:VariablePrefix stringValue="orchestratorValue"/&gt;
                                    &lt;/L7p:EvaluateJsonPathExpression&gt;
                                    &lt;L7p:SetVariable&gt;

                                    &lt;L7p:Base64Expression stringValue=""/&gt;
                                    &lt;L7p:VariableToSet stringValue="orchestratorValueResult"/&gt;
                                    &lt;/L7p:SetVariable&gt;
                                    &lt;L7p:CommentAssertion&gt;
                                    &lt;L7p:Comment stringValue="------------------------------------------------------------------------------"/&gt;
                                    &lt;/L7p:CommentAssertion&gt;
                                    &lt;L7p:CommentAssertion&gt;
                                    &lt;L7p:Comment stringValue="                Serialize multivalue into parameters"/&gt;
                                    &lt;/L7p:CommentAssertion&gt;
                                    &lt;L7p:CommentAssertion&gt;
                                    &lt;L7p:Comment stringValue="------------------------------------------------------------------------------"/&gt;
                                    &lt;/L7p:CommentAssertion&gt;
                                    &lt;L7p:ForEachLoop
                                    L7p:Usage="Required"
                                    loopVariable="orchestratorValue.results" variablePrefix="eachValueResult"&gt;
                                    &lt;wsp:OneOrMore wsp:Usage="Required"&gt;
                                    &lt;wsp:All wsp:Usage="Required"&gt;
                                    &lt;L7p:ComparisonAssertion&gt;

                                    &lt;L7p:CaseSensitive booleanValue="false"/&gt;

                                    &lt;L7p:Expression1 stringValue="${orchestratorValueResult}"/&gt;

                                    &lt;L7p:Operator operatorNull="null"/&gt;

                                    &lt;L7p:Predicates predicates="included"&gt;

                                    &lt;L7p:item dataType="included"&gt;

                                    &lt;L7p:Type variableDataType="string"/&gt;
                                    &lt;/L7p:item&gt;

                                    &lt;L7p:item binary="included"&gt;

                                    &lt;L7p:Operator operator="EMPTY"/&gt;

                                    &lt;L7p:RightValue stringValue=""/&gt;
                                    &lt;/L7p:item&gt;
                                    &lt;/L7p:Predicates&gt;
                                    &lt;/L7p:ComparisonAssertion&gt;
                                    &lt;L7p:SetVariable&gt;

                                    &lt;L7p:Base64Expression stringValue="JHtlYWNoVmFsdWVSZXN1bHQuY3VycmVudH0="/&gt;

                                    &lt;L7p:VariableToSet stringValue="orchestratorValueResult"/&gt;
                                    &lt;/L7p:SetVariable&gt;
                                    &lt;/wsp:All&gt;
                                    &lt;wsp:All wsp:Usage="Required"&gt;
                                    &lt;L7p:SetVariable&gt;

                                    &lt;L7p:Base64Expression stringValue="JHtvcmNoZXN0cmF0b3JWYWx1ZVJlc3VsdH0sJHtlYWNoVmFsdWVSZXN1bHQuY3VycmVudH0="/&gt;

                                    &lt;L7p:VariableToSet stringValue="orchestratorValueResult"/&gt;
                                    &lt;/L7p:SetVariable&gt;
                                    &lt;/wsp:All&gt;
                                    &lt;/wsp:OneOrMore&gt;
                                    &lt;/L7p:ForEachLoop&gt;
                                    &lt;L7p:Regex&gt;

                                    &lt;L7p:AssertionComment assertionComment="included"&gt;
                                    &lt;L7p:Properties mapValue="included"&gt;
                                    &lt;L7p:entry&gt;
                                    &lt;L7p:key stringValue="RIGHT.COMMENT"/&gt;

                                    &lt;L7p:value stringValue="Replacing the @##@${orchestrator.intermediate...} OR @##@${orchestrator.result...} with the real parameter value"/&gt;
                                    &lt;/L7p:entry&gt;
                                    &lt;/L7p:Properties&gt;
                                    &lt;/L7p:AssertionComment&gt;
                                    &lt;L7p:AutoTarget booleanValue="false"/&gt;
                                    &lt;L7p:CaptureVar stringValue="orchestratorQueryTemp"/&gt;

                                    &lt;L7p:OtherTargetMessageVariable stringValue="orchestratorRefStr"/&gt;
                                    &lt;L7p:Regex stringValue="@##@[^.](.*?)\}\&amp;quot;\}"/&gt;
                                    &lt;L7p:Replace booleanValue="true"/&gt;
                                    &lt;L7p:Replacement stringValue="${orchestratorValueResult}&amp;quot;}"/&gt;
                                    &lt;L7p:Target target="OTHER"/&gt;
                                    &lt;/L7p:Regex&gt;
                                    &lt;wsp:OneOrMore wsp:Usage="Required"&gt;
                                    &lt;wsp:All wsp:Usage="Required"&gt;
                                    &lt;L7p:ComparisonAssertion&gt;

                                    &lt;L7p:CaseSensitive booleanValue="false"/&gt;

                                    &lt;L7p:Expression1 stringValue="${orchestratorQuery}"/&gt;

                                    &lt;L7p:Operator operatorNull="null"/&gt;

                                    &lt;L7p:Predicates predicates="included"&gt;

                                    &lt;L7p:item dataType="included"&gt;

                                    &lt;L7p:Type variableDataType="string"/&gt;
                                    &lt;/L7p:item&gt;

                                    &lt;L7p:item binary="included"&gt;

                                    &lt;L7p:Negated booleanValue="true"/&gt;

                                    &lt;L7p:Operator operator="EMPTY"/&gt;

                                    &lt;L7p:RightValue stringValue=""/&gt;
                                    &lt;/L7p:item&gt;
                                    &lt;/L7p:Predicates&gt;
                                    &lt;/L7p:ComparisonAssertion&gt;
                                    &lt;L7p:SetVariable&gt;

                                    &lt;L7p:Base64Expression stringValue="JHtvcmNoZXN0cmF0b3JRdWVyeX0sJHtvcmNoZXN0cmF0b3JSZWZTdHJ9"/&gt;

                                    &lt;L7p:VariableToSet stringValue="orchestratorQuery"/&gt;
                                    &lt;/L7p:SetVariable&gt;
                                    &lt;/wsp:All&gt;
                                    &lt;wsp:All wsp:Usage="Required"&gt;
                                    &lt;L7p:SetVariable&gt;

                                    &lt;L7p:Base64Expression stringValue="JHtvcmNoZXN0cmF0b3JSZWZTdHJ9"/&gt;

                                    &lt;L7p:VariableToSet stringValue="orchestratorQuery"/&gt;
                                    &lt;/L7p:SetVariable&gt;
                                    &lt;/wsp:All&gt;
                                    &lt;/wsp:OneOrMore&gt;
                                    &lt;/wsp:All&gt;
                                    &lt;L7p:TrueAssertion/&gt;
                                    &lt;/wsp:OneOrMore&gt;
                                    &lt;L7p:TrueAssertion/&gt;
                                    &lt;/L7p:ForEachLoop&gt;
                                    &lt;L7p:CommentAssertion&gt;
                                    &lt;L7p:Comment stringValue="------------------------------------------------------------------------------"/&gt;
                                    &lt;/L7p:CommentAssertion&gt;
                                    &lt;L7p:CommentAssertion&gt;
                                    &lt;L7p:Comment stringValue="                 Express Parameters into Queries"/&gt;
                                    &lt;/L7p:CommentAssertion&gt;
                                    &lt;L7p:CommentAssertion&gt;
                                    &lt;L7p:Comment stringValue="------------------------------------------------------------------------------"/&gt;
                                    &lt;/L7p:CommentAssertion&gt;
                                    &lt;wsp:OneOrMore wsp:Usage="Required"&gt;
                                    &lt;wsp:All wsp:Usage="Required"&gt;
                                    &lt;L7p:ComparisonAssertion&gt;
                                    &lt;L7p:CaseSensitive booleanValue="false"/&gt;
                                    &lt;L7p:Expression1 stringValue="${orchestratorQuery}"/&gt;
                                    &lt;L7p:Operator operatorNull="null"/&gt;
                                    &lt;L7p:Predicates predicates="included"&gt;
                                    &lt;L7p:item dataType="included"&gt;
                                    &lt;L7p:Type variableDataType="string"/&gt;
                                    &lt;/L7p:item&gt;
                                    &lt;L7p:item binary="included"&gt;
                                    &lt;L7p:Negated booleanValue="true"/&gt;
                                    &lt;L7p:Operator operator="EMPTY"/&gt;
                                    &lt;L7p:RightValue stringValue=""/&gt;
                                    &lt;/L7p:item&gt;
                                    &lt;/L7p:Predicates&gt;
                                    &lt;/L7p:ComparisonAssertion&gt;
                                    &lt;L7p:Regex&gt;
                                    &lt;L7p:AutoTarget booleanValue="false"/&gt;
                                    &lt;L7p:CaseInsensitive booleanValue="true"/&gt;
                                    &lt;L7p:FindAll booleanValue="true"/&gt;

                                    &lt;L7p:OtherTargetMessageVariable stringValue="orchestratorQuery"/&gt;
                                    &lt;L7p:Regex stringValue="/[ ]*,[ ]*|[ ]+"/&gt;
                                    &lt;L7p:Replace booleanValue="true"/&gt;
                                    &lt;L7p:Replacement stringValue="+"/&gt;
                                    &lt;L7p:Target target="OTHER"/&gt;
                                    &lt;/L7p:Regex&gt;
                                    &lt;L7p:Regex&gt;
                                    &lt;L7p:AutoTarget booleanValue="false"/&gt;
                                    &lt;L7p:CaseInsensitive booleanValue="true"/&gt;
                                    &lt;L7p:FindAll booleanValue="true"/&gt;

                                    &lt;L7p:OtherTargetMessageVariable stringValue="orchestratorQuery"/&gt;
                                    &lt;L7p:Regex stringValue="&amp;quot;:&amp;quot;"/&gt;
                                    &lt;L7p:Replace booleanValue="true"/&gt;
                                    &lt;L7p:Replacement stringValue="&amp;quot;=&amp;quot;"/&gt;
                                    &lt;L7p:Target target="OTHER"/&gt;
                                    &lt;/L7p:Regex&gt;
                                    &lt;L7p:Regex&gt;
                                    &lt;L7p:AutoTarget booleanValue="false"/&gt;
                                    &lt;L7p:CaseInsensitive booleanValue="true"/&gt;
                                    &lt;L7p:FindAll booleanValue="true"/&gt;

                                    &lt;L7p:OtherTargetMessageVariable stringValue="orchestratorQuery"/&gt;
                                    &lt;L7p:Regex stringValue="\},\{"/&gt;
                                    &lt;L7p:Replace booleanValue="true"/&gt;
                                    &lt;L7p:Replacement stringValue="}&amp;amp;{"/&gt;
                                    &lt;L7p:Target target="OTHER"/&gt;
                                    &lt;/L7p:Regex&gt;
                                    &lt;L7p:Regex&gt;
                                    &lt;L7p:AutoTarget booleanValue="false"/&gt;
                                    &lt;L7p:CaseInsensitive booleanValue="true"/&gt;
                                    &lt;L7p:FindAll booleanValue="true"/&gt;

                                    &lt;L7p:OtherTargetMessageVariable stringValue="orchestratorQuery"/&gt;
                                    &lt;L7p:Regex stringValue="\{|\}|\&amp;quot;|\[|\]"/&gt;
                                    &lt;L7p:Replace booleanValue="true"/&gt;
                                    &lt;L7p:Replacement stringValue=""/&gt;
                                    &lt;L7p:Target target="OTHER"/&gt;
                                    &lt;/L7p:Regex&gt;
                                    &lt;L7p:SetVariable&gt;
                                    &lt;L7p:Base64Expression stringValue="JHtyb3V0ZVVybC5yZXN1bHR9JHtxdWVzdGlvbk1hcmt9JHtvcmNoZXN0cmF0b3JRdWVyeX0="/&gt;
                                    &lt;L7p:VariableToSet stringValue="routeUrl.result"/&gt;
                                    &lt;/L7p:SetVariable&gt;
                                    &lt;/wsp:All&gt;
                                    &lt;L7p:TrueAssertion/&gt;
                                    &lt;/wsp:OneOrMore&gt;
                                    &lt;wsp:OneOrMore wsp:Usage="Required"&gt;
                                    &lt;wsp:All wsp:Usage="Required"&gt;
                                    &lt;L7p:ComparisonAssertion&gt;
                                    &lt;L7p:CaseSensitive booleanValue="false"/&gt;
                                    &lt;L7p:Expression1 stringValue="${routeListUrlStr}"/&gt;
                                    &lt;L7p:Operator operatorNull="null"/&gt;
                                    &lt;L7p:Predicates predicates="included"&gt;
                                    &lt;L7p:item dataType="included"&gt;
                                    &lt;L7p:Type variableDataType="string"/&gt;
                                    &lt;/L7p:item&gt;
                                    &lt;L7p:item binary="included"&gt;
                                    &lt;L7p:Operator operator="EMPTY"/&gt;
                                    &lt;L7p:RightValue stringValue=""/&gt;
                                    &lt;/L7p:item&gt;
                                    &lt;/L7p:Predicates&gt;
                                    &lt;/L7p:ComparisonAssertion&gt;
                                    &lt;L7p:SetVariable&gt;
                                    &lt;L7p:Base64Expression stringValue="JHtyb3V0ZVVybC5yZXN1bHR9"/&gt;
                                    &lt;L7p:VariableToSet stringValue="routeListUrlStr"/&gt;
                                    &lt;/L7p:SetVariable&gt;
                                    &lt;/wsp:All&gt;
                                    &lt;wsp:All wsp:Usage="Required"&gt;
                                    &lt;L7p:SetVariable&gt;
                                    &lt;L7p:Base64Expression stringValue="JHtyb3V0ZUxpc3RVcmxTdHJ9PCw+JHtyb3V0ZVVybC5yZXN1bHR9"/&gt;
                                    &lt;L7p:VariableToSet stringValue="routeListUrlStr"/&gt;
                                    &lt;/L7p:SetVariable&gt;
                                    &lt;/wsp:All&gt;
                                    &lt;/wsp:OneOrMore&gt;
                                    &lt;L7p:CommentAssertion&gt;
                                    &lt;L7p:Comment stringValue="== Parse for httpMethod ==============="/&gt;
                                    &lt;/L7p:CommentAssertion&gt;
                                    &lt;L7p:SetVariable&gt;
                                    &lt;L7p:Base64Expression stringValue="JHtyb3V0ZU1zZ30="/&gt;
                                    &lt;L7p:ContentType stringValue="application/json; charset=utf-8"/&gt;
                                    &lt;L7p:DataType variableDataType="message"/&gt;
                                    &lt;L7p:VariableToSet stringValue="routeHttpMethodTransform"/&gt;
                                    &lt;/L7p:SetVariable&gt;
                                    &lt;L7p:JsonJolt&gt;
                                    &lt;L7p:OtherTargetMessageVariable stringValue="routeHttpMethodTransform"/&gt;
                                    &lt;L7p:SchemaExpression stringValueReference="inline"&gt;&lt;![CDATA[[{
  "operation": "shift",
  "spec": {
    "RouteHttp": {
      "httpMethod": ""
    }
  }
}]]]&gt;&lt;/L7p:SchemaExpression&gt;
                                    &lt;L7p:Target target="OTHER"/&gt;
                                    &lt;/L7p:JsonJolt&gt;
                                    &lt;wsp:OneOrMore wsp:Usage="Required"&gt;
                                    &lt;wsp:All wsp:Usage="Required"&gt;
                                    &lt;L7p:ComparisonAssertion&gt;
                                    &lt;L7p:CaseSensitive booleanValue="false"/&gt;
                                    &lt;L7p:Expression1 stringValue="${routeHttpMethodTransform.mainpart}"/&gt;
                                    &lt;L7p:Operator operatorNull="null"/&gt;
                                    &lt;L7p:Predicates predicates="included"&gt;
                                    &lt;L7p:item dataType="included"&gt;
                                    &lt;L7p:Type variableDataType="string"/&gt;
                                    &lt;/L7p:item&gt;
                                    &lt;L7p:item binary="included"&gt;
                                    &lt;L7p:RightValue stringValue="null"/&gt;
                                    &lt;/L7p:item&gt;
                                    &lt;/L7p:Predicates&gt;
                                    &lt;/L7p:ComparisonAssertion&gt;
                                    &lt;L7p:CustomizeErrorResponse&gt;
                                    &lt;L7p:Content stringValueReference="inline"&gt;&lt;![CDATA[{
  "errorMessage" : "Unrecognized data object within the 'orchestrator'.  Expected 'httpMethod'"
}]]&gt;&lt;/L7p:Content&gt;
                                    &lt;L7p:ContentType stringValue="application/json"/&gt;
                                    &lt;L7p:ExtraHeaders nameValuePairArray="included"/&gt;
                                    &lt;/L7p:CustomizeErrorResponse&gt;
                                    &lt;L7p:FalseAssertion/&gt;
                                    &lt;/wsp:All&gt;
                                    &lt;L7p:TrueAssertion/&gt;
                                    &lt;/wsp:OneOrMore&gt;
                                    &lt;wsp:OneOrMore wsp:Usage="Required"&gt;
                                    &lt;wsp:All wsp:Usage="Required"&gt;
                                    &lt;L7p:ComparisonAssertion&gt;
                                    &lt;L7p:CaseSensitive booleanValue="false"/&gt;
                                    &lt;L7p:Expression1 stringValue="${routeHttpMethodTransform.mainpart}"/&gt;
                                    &lt;L7p:Operator operatorNull="null"/&gt;
                                    &lt;L7p:Predicates predicates="included"&gt;
                                    &lt;L7p:item dataType="included"&gt;
                                    &lt;L7p:Type variableDataType="string"/&gt;
                                    &lt;/L7p:item&gt;
                                    &lt;L7p:item binary="included"&gt;
                                    &lt;L7p:Negated booleanValue="true"/&gt;
                                    &lt;L7p:Operator operator="EMPTY"/&gt;
                                    &lt;L7p:RightValue stringValue=""/&gt;
                                    &lt;/L7p:item&gt;
                                    &lt;/L7p:Predicates&gt;
                                    &lt;/L7p:ComparisonAssertion&gt;
                                    &lt;L7p:SetVariable&gt;
                                    &lt;L7p:Base64Expression stringValue="JHtyb3V0ZUh0dHBNZXRob2RUcmFuc2Zvcm0ubWFpbnBhcnR9"/&gt;
                                    &lt;L7p:VariableToSet stringValue="routeHttpMethod"/&gt;
                                    &lt;/L7p:SetVariable&gt;
                                    &lt;L7p:Regex&gt;
                                    &lt;L7p:AutoTarget booleanValue="false"/&gt;
                                    &lt;L7p:CaseInsensitive booleanValue="true"/&gt;
                                    &lt;L7p:FindAll booleanValue="true"/&gt;

                                    &lt;L7p:OtherTargetMessageVariable stringValue="routeHttpMethod"/&gt;
                                    &lt;L7p:Regex stringValue="&amp;quot;"/&gt;
                                    &lt;L7p:Replace booleanValue="true"/&gt;
                                    &lt;L7p:Replacement stringValue=""/&gt;
                                    &lt;L7p:Target target="OTHER"/&gt;
                                    &lt;/L7p:Regex&gt;
                                    &lt;/wsp:All&gt;
                                    &lt;wsp:All wsp:Usage="Required"&gt;
                                    &lt;L7p:SetVariable&gt;
                                    &lt;L7p:Base64Expression stringValue="R0VU"/&gt;
                                    &lt;L7p:VariableToSet stringValue="routeHttpMethod"/&gt;
                                    &lt;/L7p:SetVariable&gt;
                                    &lt;/wsp:All&gt;
                                    &lt;/wsp:OneOrMore&gt;
                                    &lt;L7p:CommentAssertion&gt;
                                    &lt;L7p:Comment stringValue="------------------------------------------------------------------------------"/&gt;
                                    &lt;/L7p:CommentAssertion&gt;
                                    &lt;L7p:CommentAssertion&gt;
                                    &lt;L7p:Comment stringValue="                Appending httpMethod into routeListHttpMethodsStr"/&gt;
                                    &lt;/L7p:CommentAssertion&gt;
                                    &lt;L7p:CommentAssertion&gt;
                                    &lt;L7p:Comment stringValue="------------------------------------------------------------------------------"/&gt;
                                    &lt;/L7p:CommentAssertion&gt;
                                    &lt;wsp:OneOrMore wsp:Usage="Required"&gt;
                                    &lt;wsp:All wsp:Usage="Required"&gt;
                                    &lt;L7p:ComparisonAssertion&gt;
                                    &lt;L7p:CaseSensitive booleanValue="false"/&gt;
                                    &lt;L7p:Expression1 stringValue="${routeListHttpMethodsStr}"/&gt;
                                    &lt;L7p:Operator operatorNull="null"/&gt;
                                    &lt;L7p:Predicates predicates="included"&gt;
                                    &lt;L7p:item dataType="included"&gt;
                                    &lt;L7p:Type variableDataType="string"/&gt;
                                    &lt;/L7p:item&gt;
                                    &lt;L7p:item binary="included"&gt;
                                    &lt;L7p:Operator operator="EMPTY"/&gt;
                                    &lt;L7p:RightValue stringValue=""/&gt;
                                    &lt;/L7p:item&gt;
                                    &lt;/L7p:Predicates&gt;
                                    &lt;/L7p:ComparisonAssertion&gt;
                                    &lt;L7p:SetVariable&gt;
                                    &lt;L7p:Base64Expression stringValue="JHtyb3V0ZUh0dHBNZXRob2R9"/&gt;
                                    &lt;L7p:VariableToSet stringValue="routeListHttpMethodsStr"/&gt;
                                    &lt;/L7p:SetVariable&gt;
                                    &lt;/wsp:All&gt;
                                    &lt;wsp:All wsp:Usage="Required"&gt;
                                    &lt;L7p:SetVariable&gt;
                                    &lt;L7p:Base64Expression stringValue="JHtyb3V0ZUxpc3RIdHRwTWV0aG9kc1N0cn08LD4ke3JvdXRlSHR0cE1ldGhvZH0="/&gt;
                                    &lt;L7p:VariableToSet stringValue="routeListHttpMethodsStr"/&gt;
                                    &lt;/L7p:SetVariable&gt;
                                    &lt;/wsp:All&gt;
                                    &lt;/wsp:OneOrMore&gt;
                                    &lt;L7p:CommentAssertion&gt;
                                    &lt;L7p:Comment stringValue="== Parse for headers ================="/&gt;
                                    &lt;/L7p:CommentAssertion&gt;
                                    &lt;L7p:SetVariable&gt;
                                    &lt;L7p:Base64Expression stringValue="JHtyb3V0ZU1zZ30="/&gt;
                                    &lt;L7p:ContentType stringValue="application/json; charset=utf-8"/&gt;
                                    &lt;L7p:DataType variableDataType="message"/&gt;
                                    &lt;L7p:VariableToSet stringValue="routeHeaderTransform"/&gt;
                                    &lt;/L7p:SetVariable&gt;
                                    &lt;L7p:JsonJolt&gt;
                                    &lt;L7p:OtherTargetMessageVariable stringValue="routeHeaderTransform"/&gt;
                                    &lt;L7p:SchemaExpression stringValueReference="inline"&gt;&lt;![CDATA[[{
  "operation": "shift",
  "spec": {
    "RouteHttp": {
      "headers": ""
    }
  }
}]]]&gt;&lt;/L7p:SchemaExpression&gt;
                                    &lt;L7p:Target target="OTHER"/&gt;
                                    &lt;/L7p:JsonJolt&gt;
                                    &lt;wsp:OneOrMore wsp:Usage="Required"&gt;
                                    &lt;wsp:All wsp:Usage="Required"&gt;
                                    &lt;L7p:ComparisonAssertion&gt;
                                    &lt;L7p:CaseSensitive booleanValue="false"/&gt;
                                    &lt;L7p:Expression1 stringValue="${routeHeaderTransform.mainpart}"/&gt;
                                    &lt;L7p:Operator operatorNull="null"/&gt;
                                    &lt;L7p:Predicates predicates="included"&gt;
                                    &lt;L7p:item dataType="included"&gt;
                                    &lt;L7p:Type variableDataType="string"/&gt;
                                    &lt;/L7p:item&gt;
                                    &lt;L7p:item binary="included"&gt;
                                    &lt;L7p:RightValue stringValue="null"/&gt;
                                    &lt;/L7p:item&gt;
                                    &lt;/L7p:Predicates&gt;
                                    &lt;/L7p:ComparisonAssertion&gt;
                                    &lt;L7p:CustomizeErrorResponse&gt;
                                    &lt;L7p:Content stringValueReference="inline"&gt;&lt;![CDATA[{
  "errorMessage" : "Unrecognized data object within the 'orchestrator'.  Expected 'headers'"
}]]&gt;&lt;/L7p:Content&gt;
                                    &lt;L7p:ContentType stringValue="application/json"/&gt;
                                    &lt;L7p:ExtraHeaders nameValuePairArray="included"/&gt;
                                    &lt;/L7p:CustomizeErrorResponse&gt;
                                    &lt;L7p:FalseAssertion/&gt;
                                    &lt;/wsp:All&gt;
                                    &lt;wsp:All wsp:Usage="Required"&gt;
                                    &lt;L7p:ComparisonAssertion&gt;
                                    &lt;L7p:CaseSensitive booleanValue="false"/&gt;
                                    &lt;L7p:Expression1 stringValue="${routeHeaderTransform.mainpart}"/&gt;
                                    &lt;L7p:Operator operatorNull="null"/&gt;
                                    &lt;L7p:Predicates predicates="included"&gt;
                                    &lt;L7p:item dataType="included"&gt;
                                    &lt;L7p:Type variableDataType="string"/&gt;
                                    &lt;/L7p:item&gt;
                                    &lt;L7p:item binary="included"&gt;
                                    &lt;L7p:Negated booleanValue="true"/&gt;
                                    &lt;L7p:RightValue stringValue="null"/&gt;
                                    &lt;/L7p:item&gt;
                                    &lt;/L7p:Predicates&gt;
                                    &lt;/L7p:ComparisonAssertion&gt;
                                    &lt;L7p:CommentAssertion&gt;
                                    &lt;L7p:Comment stringValue="------------------------------------------------------------------------------"/&gt;
                                    &lt;/L7p:CommentAssertion&gt;
                                    &lt;L7p:CommentAssertion&gt;
                                    &lt;L7p:Comment stringValue="                Appending headers into routeListHeadersStr"/&gt;
                                    &lt;/L7p:CommentAssertion&gt;
                                    &lt;L7p:CommentAssertion&gt;
                                    &lt;L7p:Comment stringValue="------------------------------------------------------------------------------"/&gt;
                                    &lt;/L7p:CommentAssertion&gt;
                                    &lt;wsp:OneOrMore wsp:Usage="Required"&gt;
                                    &lt;wsp:All wsp:Usage="Required"&gt;
                                    &lt;L7p:ComparisonAssertion&gt;

                                    &lt;L7p:CaseSensitive booleanValue="false"/&gt;
                                    &lt;L7p:Expression1 stringValue="${routeListHeadersStr}"/&gt;
                                    &lt;L7p:Operator operatorNull="null"/&gt;
                                    &lt;L7p:Predicates predicates="included"&gt;
                                    &lt;L7p:item dataType="included"&gt;

                                    &lt;L7p:Type variableDataType="string"/&gt;
                                    &lt;/L7p:item&gt;
                                    &lt;L7p:item binary="included"&gt;

                                    &lt;L7p:Operator operator="EMPTY"/&gt;

                                    &lt;L7p:RightValue stringValue=""/&gt;
                                    &lt;/L7p:item&gt;
                                    &lt;/L7p:Predicates&gt;
                                    &lt;/L7p:ComparisonAssertion&gt;
                                    &lt;L7p:SetVariable&gt;

                                    &lt;L7p:Base64Expression stringValue="JHtyb3V0ZUhlYWRlclRyYW5zZm9ybS5tYWlucGFydH0="/&gt;

                                    &lt;L7p:VariableToSet stringValue="routeListHeadersStr"/&gt;
                                    &lt;/L7p:SetVariable&gt;
                                    &lt;/wsp:All&gt;
                                    &lt;wsp:All wsp:Usage="Required"&gt;
                                    &lt;L7p:SetVariable&gt;

                                    &lt;L7p:Base64Expression stringValue="JHtyb3V0ZUxpc3RIZWFkZXJzU3RyfTwsPiR7cm91dGVIZWFkZXJUcmFuc2Zvcm0ubWFpbnBhcnR9"/&gt;

                                    &lt;L7p:VariableToSet stringValue="routeListHeadersStr"/&gt;
                                    &lt;/L7p:SetVariable&gt;
                                    &lt;/wsp:All&gt;
                                    &lt;/wsp:OneOrMore&gt;
                                    &lt;/wsp:All&gt;
                                    &lt;L7p:TrueAssertion/&gt;
                                    &lt;/wsp:OneOrMore&gt;
                                    &lt;L7p:CommentAssertion&gt;
                                    &lt;L7p:Comment stringValue="== Parse Route Request Transform spec =="/&gt;
                                    &lt;/L7p:CommentAssertion&gt;
                                    &lt;wsp:OneOrMore wsp:Usage="Required"&gt;
                                    &lt;L7p:EvaluateJsonPathExpression&gt;
                                    &lt;L7p:AssertionComment assertionComment="included"&gt;
                                    &lt;L7p:Properties mapValue="included"&gt;
                                    &lt;L7p:entry&gt;
                                    &lt;L7p:key stringValue="RIGHT.COMMENT"/&gt;
                                    &lt;L7p:value stringValue="Get 'routeIUrl' from each routeHttp"/&gt;
                                    &lt;/L7p:entry&gt;
                                    &lt;/L7p:Properties&gt;
                                    &lt;/L7p:AssertionComment&gt;
                                    &lt;L7p:Expression stringValue="$.RouteHttp.requestTransform"/&gt;

                                    &lt;L7p:OtherTargetMessageVariable stringValue="routeMsg"/&gt;
                                    &lt;L7p:Target target="OTHER"/&gt;
                                    &lt;L7p:VariablePrefix stringValue="routeRequestTransformCheck"/&gt;
                                    &lt;/L7p:EvaluateJsonPathExpression&gt;
                                    &lt;wsp:All wsp:Usage="Required"&gt;
                                    &lt;L7p:CustomizeErrorResponse&gt;
                                    &lt;L7p:Content stringValueReference="inline"&gt;&lt;![CDATA[{
  "errorMessage" : "Unrecognized data object within the 'orchestrator'. Expected 'requestTransform'."
}]]&gt;&lt;/L7p:Content&gt;
                                    &lt;L7p:ContentType stringValue="application/json"/&gt;
                                    &lt;L7p:ExtraHeaders nameValuePairArray="included"/&gt;
                                    &lt;/L7p:CustomizeErrorResponse&gt;
                                    &lt;L7p:FalseAssertion/&gt;
                                    &lt;/wsp:All&gt;
                                    &lt;/wsp:OneOrMore&gt;
                                    &lt;L7p:SetVariable&gt;
                                    &lt;L7p:Base64Expression stringValue="JHtyb3V0ZU1zZ30="/&gt;
                                    &lt;L7p:ContentType stringValue="application/json; charset=utf-8"/&gt;
                                    &lt;L7p:DataType variableDataType="message"/&gt;
                                    &lt;L7p:VariableToSet stringValue="routeRequestTransform"/&gt;
                                    &lt;/L7p:SetVariable&gt;
                                    &lt;L7p:JsonJolt&gt;
                                    &lt;L7p:OtherTargetMessageVariable stringValue="routeRequestTransform"/&gt;
                                    &lt;L7p:SchemaExpression stringValueReference="inline"&gt;&lt;![CDATA[[{
  "operation": "shift",
  "spec": {
    "RouteHttp": {
      "requestTransform": {
        "*": {
          "jolt": ""
        }
      }
    }
  }
}]]]&gt;&lt;/L7p:SchemaExpression&gt;
                                    &lt;L7p:Target target="OTHER"/&gt;
                                    &lt;/L7p:JsonJolt&gt;
                                    &lt;wsp:OneOrMore wsp:Usage="Required"&gt;
                                    &lt;wsp:All wsp:Usage="Required"&gt;
                                    &lt;L7p:ComparisonAssertion&gt;
                                    &lt;L7p:CaseSensitive booleanValue="false"/&gt;
                                    &lt;L7p:Expression1 stringValue="${routeRequestTransform.mainpart}"/&gt;
                                    &lt;L7p:Operator operatorNull="null"/&gt;
                                    &lt;L7p:Predicates predicates="included"&gt;
                                    &lt;L7p:item dataType="included"&gt;
                                    &lt;L7p:Type variableDataType="string"/&gt;
                                    &lt;/L7p:item&gt;
                                    &lt;L7p:item binary="included"&gt;
                                    &lt;L7p:Negated booleanValue="true"/&gt;
                                    &lt;L7p:RightValue stringValue="null"/&gt;
                                    &lt;/L7p:item&gt;
                                    &lt;/L7p:Predicates&gt;
                                    &lt;/L7p:ComparisonAssertion&gt;
                                    &lt;L7p:CommentAssertion&gt;
                                    &lt;L7p:Comment stringValue="------------------------------------------------------------------------------"/&gt;
                                    &lt;/L7p:CommentAssertion&gt;
                                    &lt;L7p:CommentAssertion&gt;
                                    &lt;L7p:Comment stringValue="                Appending routeRequestTransforms into routeRequestTransformsStr"/&gt;
                                    &lt;/L7p:CommentAssertion&gt;
                                    &lt;L7p:CommentAssertion&gt;
                                    &lt;L7p:Comment stringValue="------------------------------------------------------------------------------"/&gt;
                                    &lt;/L7p:CommentAssertion&gt;
                                    &lt;wsp:OneOrMore wsp:Usage="Required"&gt;
                                    &lt;wsp:All wsp:Usage="Required"&gt;
                                    &lt;L7p:ComparisonAssertion&gt;

                                    &lt;L7p:CaseSensitive booleanValue="false"/&gt;
                                    &lt;L7p:Expression1 stringValue="${routeRequestTransformsStr}"/&gt;
                                    &lt;L7p:Operator operatorNull="null"/&gt;
                                    &lt;L7p:Predicates predicates="included"&gt;
                                    &lt;L7p:item dataType="included"&gt;

                                    &lt;L7p:Type variableDataType="string"/&gt;
                                    &lt;/L7p:item&gt;
                                    &lt;L7p:item binary="included"&gt;

                                    &lt;L7p:Operator operator="EMPTY"/&gt;

                                    &lt;L7p:RightValue stringValue=""/&gt;
                                    &lt;/L7p:item&gt;
                                    &lt;/L7p:Predicates&gt;
                                    &lt;/L7p:ComparisonAssertion&gt;
                                    &lt;L7p:SetVariable&gt;

                                    &lt;L7p:Base64Expression stringValue="JHtyb3V0ZVJlcXVlc3RUcmFuc2Zvcm0ubWFpbnBhcnR9"/&gt;

                                    &lt;L7p:VariableToSet stringValue="routeRequestTransformsStr"/&gt;
                                    &lt;/L7p:SetVariable&gt;
                                    &lt;/wsp:All&gt;
                                    &lt;wsp:All wsp:Usage="Required"&gt;
                                    &lt;L7p:SetVariable&gt;

                                    &lt;L7p:Base64Expression stringValue="JHtyb3V0ZVJlcXVlc3RUcmFuc2Zvcm1zU3RyfTwsPiR7cm91dGVSZXF1ZXN0VHJhbnNmb3JtLm1haW5wYXJ0fQ=="/&gt;

                                    &lt;L7p:VariableToSet stringValue="routeRequestTransformsStr"/&gt;
                                    &lt;/L7p:SetVariable&gt;
                                    &lt;/wsp:All&gt;
                                    &lt;/wsp:OneOrMore&gt;
                                    &lt;/wsp:All&gt;
                                    &lt;L7p:TrueAssertion/&gt;
                                    &lt;/wsp:OneOrMore&gt;
                                    &lt;L7p:CommentAssertion&gt;
                                    &lt;L7p:Comment stringValue="== Parse for response transform spec =="/&gt;
                                    &lt;/L7p:CommentAssertion&gt;
                                    &lt;wsp:OneOrMore wsp:Usage="Required"&gt;
                                    &lt;L7p:EvaluateJsonPathExpression&gt;
                                    &lt;L7p:AssertionComment assertionComment="included"&gt;
                                    &lt;L7p:Properties mapValue="included"&gt;
                                    &lt;L7p:entry&gt;
                                    &lt;L7p:key stringValue="RIGHT.COMMENT"/&gt;
                                    &lt;L7p:value stringValue="Get 'routeIUrl' from each routeHttp"/&gt;
                                    &lt;/L7p:entry&gt;
                                    &lt;/L7p:Properties&gt;
                                    &lt;/L7p:AssertionComment&gt;
                                    &lt;L7p:Expression stringValue="$.RouteHttp.responseTransform"/&gt;

                                    &lt;L7p:OtherTargetMessageVariable stringValue="routeMsg"/&gt;
                                    &lt;L7p:Target target="OTHER"/&gt;
                                    &lt;L7p:VariablePrefix stringValue="routeResponseTransformCheck"/&gt;
                                    &lt;/L7p:EvaluateJsonPathExpression&gt;
                                    &lt;wsp:All wsp:Usage="Required"&gt;
                                    &lt;L7p:CustomizeErrorResponse&gt;
                                    &lt;L7p:Content stringValueReference="inline"&gt;&lt;![CDATA[{
  "errorMessage" : "Unrecognized data object within the 'orchestrator'. Expected 'responseTransform'."
}]]&gt;&lt;/L7p:Content&gt;
                                    &lt;L7p:ContentType stringValue="application/json"/&gt;
                                    &lt;L7p:ExtraHeaders nameValuePairArray="included"/&gt;
                                    &lt;/L7p:CustomizeErrorResponse&gt;
                                    &lt;L7p:FalseAssertion/&gt;
                                    &lt;/wsp:All&gt;
                                    &lt;/wsp:OneOrMore&gt;
                                    &lt;L7p:SetVariable&gt;
                                    &lt;L7p:Base64Expression stringValue="JHtyb3V0ZU1zZ30="/&gt;
                                    &lt;L7p:ContentType stringValue="application/json; charset=utf-8"/&gt;
                                    &lt;L7p:DataType variableDataType="message"/&gt;
                                    &lt;L7p:VariableToSet stringValue="routeResponseTransform"/&gt;
                                    &lt;/L7p:SetVariable&gt;
                                    &lt;L7p:JsonJolt&gt;
                                    &lt;L7p:OtherTargetMessageVariable stringValue="routeResponseTransform"/&gt;
                                    &lt;L7p:SchemaExpression stringValueReference="inline"&gt;&lt;![CDATA[[{
  "operation": "shift",
  "spec": {
    "RouteHttp": {
      "responseTransform": {
        "*": {
          "jolt": ""
        }
      }
    }
  }
}]]]&gt;&lt;/L7p:SchemaExpression&gt;
                                    &lt;L7p:Target target="OTHER"/&gt;
                                    &lt;/L7p:JsonJolt&gt;
                                    &lt;wsp:OneOrMore wsp:Usage="Required"&gt;
                                    &lt;wsp:All wsp:Usage="Required"&gt;
                                    &lt;L7p:ComparisonAssertion&gt;
                                    &lt;L7p:CaseSensitive booleanValue="false"/&gt;
                                    &lt;L7p:Expression1 stringValue="${routeResponseTransform.mainpart}"/&gt;
                                    &lt;L7p:Operator operatorNull="null"/&gt;
                                    &lt;L7p:Predicates predicates="included"&gt;
                                    &lt;L7p:item dataType="included"&gt;
                                    &lt;L7p:Type variableDataType="string"/&gt;
                                    &lt;/L7p:item&gt;
                                    &lt;L7p:item binary="included"&gt;
                                    &lt;L7p:Negated booleanValue="true"/&gt;
                                    &lt;L7p:RightValue stringValue="null"/&gt;
                                    &lt;/L7p:item&gt;
                                    &lt;/L7p:Predicates&gt;
                                    &lt;/L7p:ComparisonAssertion&gt;
                                    &lt;L7p:CommentAssertion&gt;
                                    &lt;L7p:Comment stringValue="------------------------------------------------------------------------------"/&gt;
                                    &lt;/L7p:CommentAssertion&gt;
                                    &lt;L7p:CommentAssertion&gt;
                                    &lt;L7p:Comment stringValue="                Appending routeRequestTransforms into routeRequestTransformsStr"/&gt;
                                    &lt;/L7p:CommentAssertion&gt;
                                    &lt;L7p:CommentAssertion&gt;
                                    &lt;L7p:Comment stringValue="------------------------------------------------------------------------------"/&gt;
                                    &lt;/L7p:CommentAssertion&gt;
                                    &lt;wsp:OneOrMore wsp:Usage="Required"&gt;
                                    &lt;wsp:All wsp:Usage="Required"&gt;
                                    &lt;L7p:ComparisonAssertion&gt;

                                    &lt;L7p:CaseSensitive booleanValue="false"/&gt;
                                    &lt;L7p:Expression1 stringValue="${routeResponseTransformsStr}"/&gt;
                                    &lt;L7p:Operator operatorNull="null"/&gt;
                                    &lt;L7p:Predicates predicates="included"&gt;
                                    &lt;L7p:item dataType="included"&gt;

                                    &lt;L7p:Type variableDataType="string"/&gt;
                                    &lt;/L7p:item&gt;
                                    &lt;L7p:item binary="included"&gt;

                                    &lt;L7p:Operator operator="EMPTY"/&gt;

                                    &lt;L7p:RightValue stringValue=""/&gt;
                                    &lt;/L7p:item&gt;
                                    &lt;/L7p:Predicates&gt;
                                    &lt;/L7p:ComparisonAssertion&gt;
                                    &lt;L7p:SetVariable&gt;

                                    &lt;L7p:Base64Expression stringValue="JHtyb3V0ZVJlc3BvbnNlVHJhbnNmb3JtLm1haW5wYXJ0fQ=="/&gt;

                                    &lt;L7p:VariableToSet stringValue="routeResponseTransformsStr"/&gt;
                                    &lt;/L7p:SetVariable&gt;
                                    &lt;/wsp:All&gt;
                                    &lt;wsp:All wsp:Usage="Required"&gt;
                                    &lt;L7p:SetVariable&gt;

                                    &lt;L7p:Base64Expression stringValue="JHtyb3V0ZVJlc3BvbnNlVHJhbnNmb3Jtc1N0cn08LD4ke3JvdXRlUmVzcG9uc2VUcmFuc2Zvcm0ubWFpbnBhcnR9"/&gt;

                                    &lt;L7p:VariableToSet stringValue="routeResponseTransformsStr"/&gt;
                                    &lt;/L7p:SetVariable&gt;
                                    &lt;/wsp:All&gt;
                                    &lt;/wsp:OneOrMore&gt;
                                    &lt;/wsp:All&gt;
                                    &lt;L7p:TrueAssertion/&gt;
                                    &lt;/wsp:OneOrMore&gt;
                                    &lt;L7p:TrueAssertion/&gt;
                                &lt;/wsp:All&gt;
                                &lt;L7p:TrueAssertion/&gt;
                            &lt;/wsp:OneOrMore&gt;
                        &lt;/wsp:All&gt;
                    &lt;/L7p:ForEachLoop&gt;
                    &lt;L7p:CommentAssertion&gt;
                        &lt;L7p:Comment stringValue="------------------------------------------------------------------------------"/&gt;
                    &lt;/L7p:CommentAssertion&gt;
                    &lt;L7p:CommentAssertion&gt;
                        &lt;L7p:Comment stringValue="                 ROUTING  ..."/&gt;
                    &lt;/L7p:CommentAssertion&gt;
                    &lt;L7p:CommentAssertion&gt;
                        &lt;L7p:Comment stringValue="------------------------------------------------------------------------------"/&gt;
                    &lt;/L7p:CommentAssertion&gt;
                    &lt;wsp:OneOrMore wsp:Usage="Required"&gt;
                        &lt;wsp:All wsp:Usage="Required"&gt;
                            &lt;L7p:AuditDetailAssertion&gt;
                                &lt;L7p:Detail stringValue="Audit:  Policy Fragment RouteOrchestrator"/&gt;
                            &lt;/L7p:AuditDetailAssertion&gt;
                            &lt;L7p:CommentAssertion&gt;
                                &lt;L7p:Comment stringValue="------------------------------------------------------------------------------"/&gt;
                            &lt;/L7p:CommentAssertion&gt;
                            &lt;L7p:CommentAssertion&gt;
                                &lt;L7p:Comment stringValue="             ROUTE to each URL"/&gt;
                            &lt;/L7p:CommentAssertion&gt;
                            &lt;L7p:CommentAssertion&gt;
                                &lt;L7p:Comment stringValue="------------------------------------------------------------------------------"/&gt;
                            &lt;/L7p:CommentAssertion&gt;
                            &lt;L7p:SetVariable&gt;
                                &lt;L7p:Base64Expression stringValue="MA=="/&gt;
                                &lt;L7p:DataType variableDataType="int"/&gt;
                                &lt;L7p:VariableToSet stringValue="feedback.current.status"/&gt;
                            &lt;/L7p:SetVariable&gt;
                            &lt;L7p:Split&gt;
                                &lt;L7p:InputVariable stringValue="routeListUrlStr"/&gt;
                                &lt;L7p:OutputVariable stringValue="routeListUrl"/&gt;
                                &lt;L7p:SplitPattern stringValue="&amp;lt;,&gt;"/&gt;
                            &lt;/L7p:Split&gt;
                            &lt;L7p:Split&gt;
                                &lt;L7p:InputVariable stringValue="routeListHeadersStr"/&gt;
                                &lt;L7p:OutputVariable stringValue="routeListHeaders"/&gt;
                                &lt;L7p:SplitPattern stringValue="&amp;lt;,&gt;"/&gt;
                            &lt;/L7p:Split&gt;
                            &lt;L7p:Split&gt;
                                &lt;L7p:InputVariable stringValue="routeListHttpMethodsStr"/&gt;
                                &lt;L7p:OutputVariable stringValue="routeListHttpMethods"/&gt;
                                &lt;L7p:SplitPattern stringValue="&amp;lt;,&gt;"/&gt;
                            &lt;/L7p:Split&gt;
                            &lt;L7p:Split&gt;
                                &lt;L7p:InputVariable stringValue="routeResponseTransformsStr"/&gt;
                                &lt;L7p:OutputVariable stringValue="routeResponseTransforms"/&gt;
                                &lt;L7p:SplitPattern stringValue="&amp;lt;,&gt;"/&gt;
                            &lt;/L7p:Split&gt;
                            &lt;L7p:Split&gt;
                                &lt;L7p:InputVariable stringValue="routeRequestTransformsStr"/&gt;
                                &lt;L7p:OutputVariable stringValue="routeRequestTransforms"/&gt;
                                &lt;L7p:SplitPattern stringValue="&amp;lt;,&gt;"/&gt;
                            &lt;/L7p:Split&gt;
                            &lt;L7p:ForEachLoop L7p:Usage="Required"
                                iterationLimit="10"
                                loopVariable="routeListUrl" variablePrefix="strategy"&gt;
                                &lt;L7p:CommentAssertion&gt;
                                    &lt;L7p:Comment stringValue="--------------------------------------------"/&gt;
                                &lt;/L7p:CommentAssertion&gt;
                                &lt;L7p:CommentAssertion&gt;
                                    &lt;L7p:Comment stringValue="Add custom headers"/&gt;
                                &lt;/L7p:CommentAssertion&gt;
                                &lt;L7p:CommentAssertion&gt;
                                    &lt;L7p:Comment stringValue="--------------------------------------------"/&gt;
                                &lt;/L7p:CommentAssertion&gt;
                                &lt;L7p:ItemLookupByIndex&gt;
                                    &lt;L7p:IndexValue stringValue="${strategy.iterations}"/&gt;
                                    &lt;L7p:MultivaluedVariableName stringValue="routeListHeaders"/&gt;
                                    &lt;L7p:OutputVariableName stringValue="header_list"/&gt;
                                &lt;/L7p:ItemLookupByIndex&gt;
                                &lt;L7p:Regex&gt;
                                    &lt;L7p:AutoTarget booleanValue="false"/&gt;
                                    &lt;L7p:CaseInsensitive booleanValue="true"/&gt;
                                    &lt;L7p:FindAll booleanValue="true"/&gt;
                                    &lt;L7p:OtherTargetMessageVariable stringValue="header_list"/&gt;
                                    &lt;L7p:Regex stringValue="\{|\}|\&amp;quot;|\[|\]"/&gt;
                                    &lt;L7p:Replace booleanValue="true"/&gt;
                                    &lt;L7p:Replacement stringValue=""/&gt;
                                    &lt;L7p:Target target="OTHER"/&gt;
                                &lt;/L7p:Regex&gt;
                                &lt;wsp:OneOrMore wsp:Usage="Required"&gt;
                                    &lt;wsp:All wsp:Usage="Required"&gt;
                                    &lt;L7p:ComparisonAssertion&gt;
                                    &lt;L7p:CaseSensitive booleanValue="false"/&gt;
                                    &lt;L7p:Expression1 stringValue="${header_list}"/&gt;
                                    &lt;L7p:Operator operatorNull="null"/&gt;
                                    &lt;L7p:Predicates predicates="included"&gt;
                                    &lt;L7p:item dataType="included"&gt;
                                    &lt;L7p:Type variableDataType="string"/&gt;
                                    &lt;/L7p:item&gt;
                                    &lt;L7p:item binary="included"&gt;
                                    &lt;L7p:Negated booleanValue="true"/&gt;
                                    &lt;L7p:Operator operator="EMPTY"/&gt;
                                    &lt;L7p:RightValue stringValue=""/&gt;
                                    &lt;/L7p:item&gt;
                                    &lt;/L7p:Predicates&gt;
                                    &lt;/L7p:ComparisonAssertion&gt;
                                    &lt;L7p:Split&gt;
                                    &lt;L7p:InputVariable stringValue="header_list"/&gt;
                                    &lt;L7p:OutputVariable stringValue="routeHeaderList"/&gt;
                                    &lt;/L7p:Split&gt;
                                    &lt;L7p:ForEachLoop
                                    L7p:Usage="Required"
                                    loopVariable="routeHeaderList" variablePrefix="eachHeader"&gt;
                                    &lt;L7p:ItemLookupByIndex&gt;
                                    &lt;L7p:IndexValue stringValue="${eachHeader.iterations}"/&gt;

                                    &lt;L7p:MultivaluedVariableName stringValue="routeHeaderList"/&gt;
                                    &lt;L7p:OutputVariableName stringValue="routeHeader"/&gt;
                                    &lt;/L7p:ItemLookupByIndex&gt;
                                    &lt;L7p:Split&gt;
                                    &lt;L7p:InputVariable stringValue="routeHeader"/&gt;
                                    &lt;L7p:OutputVariable stringValue="routeHeaderPair"/&gt;
                                    &lt;L7p:SplitPattern stringValue=":"/&gt;
                                    &lt;/L7p:Split&gt;
                                    &lt;L7p:ItemLookupByIndex&gt;

                                    &lt;L7p:MultivaluedVariableName stringValue="routeHeaderPair"/&gt;
                                    &lt;L7p:OutputVariableName stringValue="header_key"/&gt;
                                    &lt;/L7p:ItemLookupByIndex&gt;
                                    &lt;L7p:ItemLookupByIndex&gt;
                                    &lt;L7p:IndexValue stringValue="1"/&gt;

                                    &lt;L7p:MultivaluedVariableName stringValue="routeHeaderPair"/&gt;
                                    &lt;L7p:OutputVariableName stringValue="header_value"/&gt;
                                    &lt;/L7p:ItemLookupByIndex&gt;
                                    &lt;L7p:AddHeader&gt;
                                    &lt;L7p:HeaderName stringValue="${header_key}"/&gt;
                                    &lt;L7p:HeaderValue stringValue="${header_value}"/&gt;
                                    &lt;/L7p:AddHeader&gt;
                                    &lt;/L7p:ForEachLoop&gt;
                                    &lt;/wsp:All&gt;
                                    &lt;L7p:TrueAssertion/&gt;
                                &lt;/wsp:OneOrMore&gt;
                                &lt;L7p:CommentAssertion&gt;
                                    &lt;L7p:Comment stringValue="--------------------------------------------"/&gt;
                                &lt;/L7p:CommentAssertion&gt;
                                &lt;L7p:CommentAssertion&gt;
                                    &lt;L7p:Comment stringValue="Setting request.http.method"/&gt;
                                &lt;/L7p:CommentAssertion&gt;
                                &lt;L7p:CommentAssertion&gt;
                                    &lt;L7p:Comment stringValue="--------------------------------------------"/&gt;
                                &lt;/L7p:CommentAssertion&gt;
                                &lt;L7p:ItemLookupByIndex&gt;
                                    &lt;L7p:IndexValue stringValue="${strategy.iterations}"/&gt;
                                    &lt;L7p:MultivaluedVariableName stringValue="routeListHttpMethods"/&gt;
                                    &lt;L7p:OutputVariableName stringValue="request_method"/&gt;
                                &lt;/L7p:ItemLookupByIndex&gt;
                                &lt;L7p:CommentAssertion&gt;
                                    &lt;L7p:Comment stringValue="--------------------------------------------"/&gt;
                                &lt;/L7p:CommentAssertion&gt;
                                &lt;L7p:CommentAssertion&gt;
                                    &lt;L7p:Comment stringValue="Transforming and setting request payload"/&gt;
                                &lt;/L7p:CommentAssertion&gt;
                                &lt;L7p:CommentAssertion&gt;
                                    &lt;L7p:Comment stringValue="--------------------------------------------"/&gt;
                                &lt;/L7p:CommentAssertion&gt;
                                &lt;L7p:SetVariable&gt;
                                    &lt;L7p:Base64Expression stringValue="JHtyZXF1ZXN0Lm1haW5wYXJ0fQ=="/&gt;
                                    &lt;L7p:VariableToSet stringValue="request_payload"/&gt;
                                &lt;/L7p:SetVariable&gt;
                                &lt;wsp:OneOrMore wsp:Usage="Required"&gt;
                                    &lt;wsp:All wsp:Usage="Required"&gt;
                                    &lt;L7p:ComparisonAssertion&gt;
                                    &lt;L7p:CaseSensitive booleanValue="false"/&gt;
                                    &lt;L7p:Expression1 stringValue="${request_payload}"/&gt;
                                    &lt;L7p:Operator operatorNull="null"/&gt;
                                    &lt;L7p:Predicates predicates="included"&gt;
                                    &lt;L7p:item dataType="included"&gt;
                                    &lt;L7p:Type variableDataType="string"/&gt;
                                    &lt;/L7p:item&gt;
                                    &lt;L7p:item binary="included"&gt;
                                    &lt;L7p:Negated booleanValue="true"/&gt;
                                    &lt;L7p:Operator operator="EMPTY"/&gt;
                                    &lt;L7p:RightValue stringValue=""/&gt;
                                    &lt;/L7p:item&gt;
                                    &lt;/L7p:Predicates&gt;
                                    &lt;/L7p:ComparisonAssertion&gt;
                                    &lt;L7p:CommentAssertion&gt;
                                    &lt;L7p:Comment stringValue="--------------------------------------------"/&gt;
                                    &lt;/L7p:CommentAssertion&gt;
                                    &lt;L7p:CommentAssertion&gt;
                                    &lt;L7p:Comment stringValue="                 Check compliance for RFC 7231 (sec. 4.3.8)"/&gt;
                                    &lt;/L7p:CommentAssertion&gt;
                                    &lt;L7p:CommentAssertion&gt;
                                    &lt;L7p:Comment stringValue="--------------------------------------------"/&gt;
                                    &lt;/L7p:CommentAssertion&gt;
                                    &lt;L7p:ComparisonAssertion&gt;
                                    &lt;L7p:CaseSensitive booleanValue="false"/&gt;
                                    &lt;L7p:Expression1 stringValue="${request_method}"/&gt;
                                    &lt;L7p:Operator operatorNull="null"/&gt;
                                    &lt;L7p:Predicates predicates="included"&gt;
                                    &lt;L7p:item dataType="included"&gt;
                                    &lt;L7p:Type variableDataType="string"/&gt;
                                    &lt;/L7p:item&gt;
                                    &lt;L7p:item binary="included"&gt;
                                    &lt;L7p:Negated booleanValue="true"/&gt;
                                    &lt;L7p:RightValue stringValue="GET"/&gt;
                                    &lt;/L7p:item&gt;
                                    &lt;L7p:item binary="included"&gt;
                                    &lt;L7p:Negated booleanValue="true"/&gt;
                                    &lt;L7p:RightValue stringValue="HEAD"/&gt;
                                    &lt;/L7p:item&gt;
                                    &lt;L7p:item binary="included"&gt;
                                    &lt;L7p:Negated booleanValue="true"/&gt;
                                    &lt;L7p:RightValue stringValue="OPTIONS"/&gt;
                                    &lt;/L7p:item&gt;
                                    &lt;L7p:item binary="included"&gt;
                                    &lt;L7p:Negated booleanValue="true"/&gt;
                                    &lt;L7p:RightValue stringValue="CONNECT"/&gt;
                                    &lt;/L7p:item&gt;
                                    &lt;L7p:item binary="included"&gt;
                                    &lt;L7p:Negated booleanValue="true"/&gt;
                                    &lt;L7p:RightValue stringValue="TRACE"/&gt;
                                    &lt;/L7p:item&gt;
                                    &lt;/L7p:Predicates&gt;
                                    &lt;/L7p:ComparisonAssertion&gt;
                                    &lt;L7p:ItemLookupByIndex&gt;
                                    &lt;L7p:IndexValue stringValue="${strategy.iterations}"/&gt;
                                    &lt;L7p:MultivaluedVariableName stringValue="routeRequestTransforms"/&gt;
                                    &lt;L7p:OutputVariableName stringValue="transformSpec"/&gt;
                                    &lt;/L7p:ItemLookupByIndex&gt;
                                    &lt;L7p:CommentAssertion&gt;
                                    &lt;L7p:Comment stringValue="----------------------------------------------------------------------------------------"/&gt;
                                    &lt;/L7p:CommentAssertion&gt;
                                    &lt;L7p:CommentAssertion&gt;
                                    &lt;L7p:Comment stringValue="                 Check 'requestTransform'"/&gt;
                                    &lt;/L7p:CommentAssertion&gt;
                                    &lt;L7p:CommentAssertion&gt;
                                    &lt;L7p:Comment stringValue="----------------------------------------------------------------------------------------"/&gt;
                                    &lt;/L7p:CommentAssertion&gt;
                                    &lt;L7p:SetVariable&gt;
                                    &lt;L7p:Base64Expression stringValue="JHt0cmFuc2Zvcm1TcGVjfQ=="/&gt;
                                    &lt;L7p:ContentType stringValue="application/json; charset=utf-8"/&gt;
                                    &lt;L7p:DataType variableDataType="message"/&gt;
                                    &lt;L7p:VariableToSet stringValue="transformSpecMsg"/&gt;
                                    &lt;/L7p:SetVariable&gt;
                                    &lt;L7p:EvaluateJsonPathExpression&gt;
                                    &lt;L7p:AssertionComment assertionComment="included"&gt;
                                    &lt;L7p:Properties mapValue="included"&gt;
                                    &lt;L7p:entry&gt;
                                    &lt;L7p:key stringValue="RIGHT.COMMENT"/&gt;
                                    &lt;L7p:value stringValue="Get 'routeList' of the current 'aggregator'"/&gt;
                                    &lt;/L7p:entry&gt;
                                    &lt;/L7p:Properties&gt;
                                    &lt;/L7p:AssertionComment&gt;
                                    &lt;L7p:Expression stringValue="$.[*].operation"/&gt;

                                    &lt;L7p:OtherTargetMessageVariable stringValue="transformSpecMsg"/&gt;
                                    &lt;L7p:Target target="OTHER"/&gt;
                                    &lt;L7p:VariablePrefix stringValue="joltOperations"/&gt;
                                    &lt;/L7p:EvaluateJsonPathExpression&gt;
                                    &lt;wsp:OneOrMore wsp:Usage="Required"&gt;
                                    &lt;L7p:ComparisonAssertion&gt;
                                    &lt;L7p:CaseSensitive booleanValue="false"/&gt;
                                    &lt;L7p:Expression1 stringValue="${joltOperations.result}"/&gt;
                                    &lt;L7p:Operator operatorNull="null"/&gt;
                                    &lt;L7p:Predicates predicates="included"&gt;
                                    &lt;L7p:item dataType="included"&gt;
                                    &lt;L7p:Type variableDataType="string"/&gt;
                                    &lt;/L7p:item&gt;
                                    &lt;L7p:item binary="included"&gt;
                                    &lt;L7p:Negated booleanValue="true"/&gt;
                                    &lt;L7p:RightValue stringValue="null"/&gt;
                                    &lt;/L7p:item&gt;
                                    &lt;/L7p:Predicates&gt;
                                    &lt;/L7p:ComparisonAssertion&gt;
                                    &lt;wsp:All wsp:Usage="Required"&gt;
                                    &lt;L7p:CustomizeErrorResponse&gt;
                                    &lt;L7p:Content stringValueReference="inline"&gt;&lt;![CDATA[{
  "errorMessage" : "Unrecognized data object within the 'orchestrator'.  Expect 'operation' in 'requestTransform'."
}]]&gt;&lt;/L7p:Content&gt;
                                    &lt;L7p:ContentType stringValue="application/json"/&gt;
                                    &lt;L7p:ExtraHeaders nameValuePairArray="included"/&gt;
                                    &lt;/L7p:CustomizeErrorResponse&gt;
                                    &lt;L7p:FalseAssertion/&gt;
                                    &lt;/wsp:All&gt;
                                    &lt;/wsp:OneOrMore&gt;
                                    &lt;L7p:ForEachLoop
                                    L7p:Usage="Required"
                                    loopVariable="joltOperations.results" variablePrefix="joltOperation"&gt;
                                    &lt;L7p:SetVariable&gt;
                                    &lt;L7p:Base64Expression stringValue="JHtqb2x0T3BlcmF0aW9uLmN1cnJlbnR9"/&gt;
                                    &lt;L7p:VariableToSet stringValue="currentOperation"/&gt;
                                    &lt;/L7p:SetVariable&gt;
                                    &lt;wsp:OneOrMore wsp:Usage="Required"&gt;
                                    &lt;wsp:All wsp:Usage="Required"&gt;
                                    &lt;L7p:ComparisonAssertion&gt;

                                    &lt;L7p:CaseSensitive booleanValue="false"/&gt;
                                    &lt;L7p:Expression1 stringValue="${currentOperation}"/&gt;
                                    &lt;L7p:Operator operatorNull="null"/&gt;
                                    &lt;L7p:Predicates predicates="included"&gt;
                                    &lt;L7p:item dataType="included"&gt;

                                    &lt;L7p:Type variableDataType="string"/&gt;
                                    &lt;/L7p:item&gt;
                                    &lt;L7p:item binary="included"&gt;

                                    &lt;L7p:Negated booleanValue="true"/&gt;

                                    &lt;L7p:RightValue stringValue="shift"/&gt;
                                    &lt;/L7p:item&gt;
                                    &lt;L7p:item binary="included"&gt;

                                    &lt;L7p:Negated booleanValue="true"/&gt;

                                    &lt;L7p:RightValue stringValue="default"/&gt;
                                    &lt;/L7p:item&gt;
                                    &lt;L7p:item binary="included"&gt;

                                    &lt;L7p:Negated booleanValue="true"/&gt;

                                    &lt;L7p:RightValue stringValue="remove"/&gt;
                                    &lt;/L7p:item&gt;
                                    &lt;/L7p:Predicates&gt;
                                    &lt;/L7p:ComparisonAssertion&gt;
                                    &lt;L7p:SetVariable&gt;

                                    &lt;L7p:Base64Expression stringValue="MQ=="/&gt;
                                    &lt;L7p:DataType variableDataType="int"/&gt;

                                    &lt;L7p:VariableToSet stringValue="isInvalidJoltOperation"/&gt;
                                    &lt;/L7p:SetVariable&gt;
                                    &lt;L7p:SetVariable&gt;

                                    &lt;L7p:Base64Expression stringValue="dHJ1ZQ=="/&gt;

                                    &lt;L7p:VariableToSet stringValue="isInvalidJoltOperation.break"/&gt;
                                    &lt;/L7p:SetVariable&gt;
                                    &lt;/wsp:All&gt;
                                    &lt;L7p:TrueAssertion/&gt;
                                    &lt;/wsp:OneOrMore&gt;
                                    &lt;/L7p:ForEachLoop&gt;
                                    &lt;wsp:OneOrMore wsp:Usage="Required"&gt;
                                    &lt;L7p:ComparisonAssertion&gt;
                                    &lt;L7p:CaseSensitive booleanValue="false"/&gt;
                                    &lt;L7p:Expression1 stringValue="${isInvalidJoltOperation}"/&gt;
                                    &lt;L7p:Operator operatorNull="null"/&gt;
                                    &lt;L7p:Predicates predicates="included"&gt;
                                    &lt;L7p:item dataType="included"&gt;
                                    &lt;L7p:Type variableDataType="int"/&gt;
                                    &lt;/L7p:item&gt;
                                    &lt;L7p:item binary="included"&gt;
                                    &lt;L7p:RightValue stringValue="0"/&gt;
                                    &lt;/L7p:item&gt;
                                    &lt;/L7p:Predicates&gt;
                                    &lt;/L7p:ComparisonAssertion&gt;
                                    &lt;wsp:All wsp:Usage="Required"&gt;
                                    &lt;L7p:CustomizeErrorResponse&gt;
                                    &lt;L7p:Content stringValueReference="inline"&gt;&lt;![CDATA[{
  "errorMessage" : "Unrecognized data object within the 'orchestrator'.  Expect 'shift', 'default' or 'remove' in 'requestTransform' 'operation'."
}]]&gt;&lt;/L7p:Content&gt;
                                    &lt;L7p:ContentType stringValue="application/json"/&gt;
                                    &lt;L7p:ExtraHeaders nameValuePairArray="included"/&gt;
                                    &lt;/L7p:CustomizeErrorResponse&gt;
                                    &lt;L7p:FalseAssertion/&gt;
                                    &lt;/wsp:All&gt;
                                    &lt;/wsp:OneOrMore&gt;
                                    &lt;L7p:CommentAssertion&gt;
                                    &lt;L7p:Comment stringValue="----------------------------------------------------------------------------------------"/&gt;
                                    &lt;/L7p:CommentAssertion&gt;
                                    &lt;L7p:CommentAssertion&gt;
                                    &lt;L7p:Comment stringValue="              Check on the 'requestTransform' Jolt 'spec'"/&gt;
                                    &lt;/L7p:CommentAssertion&gt;
                                    &lt;L7p:CommentAssertion&gt;
                                    &lt;L7p:Comment stringValue="----------------------------------------------------------------------------------------"/&gt;
                                    &lt;/L7p:CommentAssertion&gt;
                                    &lt;L7p:EvaluateJsonPathExpression&gt;
                                    &lt;L7p:AssertionComment assertionComment="included"&gt;
                                    &lt;L7p:Properties mapValue="included"&gt;
                                    &lt;L7p:entry&gt;
                                    &lt;L7p:key stringValue="RIGHT.COMMENT"/&gt;
                                    &lt;L7p:value stringValue="Get 'routeList' of the current 'aggregator'"/&gt;
                                    &lt;/L7p:entry&gt;
                                    &lt;/L7p:Properties&gt;
                                    &lt;/L7p:AssertionComment&gt;
                                    &lt;L7p:Expression stringValue="$.[*].spec"/&gt;

                                    &lt;L7p:OtherTargetMessageVariable stringValue="transformSpecMsg"/&gt;
                                    &lt;L7p:Target target="OTHER"/&gt;
                                    &lt;L7p:VariablePrefix stringValue="joltSpecs"/&gt;
                                    &lt;/L7p:EvaluateJsonPathExpression&gt;
                                    &lt;wsp:OneOrMore wsp:Usage="Required"&gt;
                                    &lt;L7p:ComparisonAssertion&gt;
                                    &lt;L7p:CaseSensitive booleanValue="false"/&gt;
                                    &lt;L7p:Expression1 stringValue="${joltSpecs.result}"/&gt;
                                    &lt;L7p:Operator operatorNull="null"/&gt;
                                    &lt;L7p:Predicates predicates="included"&gt;
                                    &lt;L7p:item dataType="included"&gt;
                                    &lt;L7p:Type variableDataType="string"/&gt;
                                    &lt;/L7p:item&gt;
                                    &lt;L7p:item binary="included"&gt;
                                    &lt;L7p:Negated booleanValue="true"/&gt;
                                    &lt;L7p:RightValue stringValue="null"/&gt;
                                    &lt;/L7p:item&gt;
                                    &lt;/L7p:Predicates&gt;
                                    &lt;/L7p:ComparisonAssertion&gt;
                                    &lt;wsp:All wsp:Usage="Required"&gt;
                                    &lt;L7p:CustomizeErrorResponse&gt;
                                    &lt;L7p:Content stringValueReference="inline"&gt;&lt;![CDATA[{
  "errorMessage" : "Unrecognized data object within the 'orchestrator'.  Expect 'spec' in 'requestTransform'."
}]]&gt;&lt;/L7p:Content&gt;
                                    &lt;L7p:ContentType stringValue="application/json"/&gt;
                                    &lt;L7p:ExtraHeaders nameValuePairArray="included"/&gt;
                                    &lt;/L7p:CustomizeErrorResponse&gt;
                                    &lt;L7p:FalseAssertion/&gt;
                                    &lt;/wsp:All&gt;
                                    &lt;/wsp:OneOrMore&gt;
                                    &lt;L7p:CommentAssertion&gt;
                                    &lt;L7p:Comment stringValue="------------------End check------------------------------------------------------------"/&gt;
                                    &lt;/L7p:CommentAssertion&gt;
                                    &lt;L7p:JsonJolt&gt;

                                    &lt;L7p:OtherTargetMessageVariable stringValue="request_payload"/&gt;
                                    &lt;L7p:SchemaExpression stringValue="${transformSpec}"/&gt;
                                    &lt;L7p:Target target="OTHER"/&gt;
                                    &lt;/L7p:JsonJolt&gt;
                                    &lt;/wsp:All&gt;
                                    &lt;L7p:TrueAssertion/&gt;
                                &lt;/wsp:OneOrMore&gt;
                                &lt;L7p:CommentAssertion&gt;
                                    &lt;L7p:Comment stringValue="--------------------------------------------"/&gt;
                                &lt;/L7p:CommentAssertion&gt;
                                &lt;L7p:CommentAssertion&gt;
                                    &lt;L7p:Comment stringValue="                Routing request"/&gt;
                                &lt;/L7p:CommentAssertion&gt;
                                &lt;L7p:CommentAssertion&gt;
                                    &lt;L7p:Comment stringValue="--------------------------------------------"/&gt;
                                &lt;/L7p:CommentAssertion&gt;
                                &lt;L7p:SetVariable&gt;
                                    &lt;L7p:Base64Expression stringValue="JHtzdHJhdGVneS5jdXJyZW50fQ=="/&gt;
                                    &lt;L7p:VariableToSet stringValue="currentRoute"/&gt;
                                &lt;/L7p:SetVariable&gt;
                                &lt;wsp:OneOrMore wsp:Usage="Required"&gt;
                                    &lt;L7p:HttpRoutingAssertion&gt;
                                    &lt;L7p:HttpMethod httpMethod="OTHER"/&gt;
                                    &lt;L7p:HttpMethodAsString stringValue="${request_method}"/&gt;
                                    &lt;L7p:ProtectedServiceUrl stringValue="${currentRoute}"/&gt;
                                    &lt;L7p:ProxyPassword stringValueNull="null"/&gt;
                                    &lt;L7p:ProxyUsername stringValueNull="null"/&gt;
                                    &lt;L7p:RequestHeaderRules httpPassthroughRuleSet="included"&gt;
                                    &lt;L7p:ForwardAll booleanValue="true"/&gt;
                                    &lt;L7p:Rules httpPassthroughRules="included"&gt;
                                    &lt;L7p:item httpPassthroughRule="included"&gt;
                                    &lt;L7p:Name stringValue="Cookie"/&gt;
                                    &lt;/L7p:item&gt;
                                    &lt;L7p:item httpPassthroughRule="included"&gt;
                                    &lt;L7p:Name stringValue="SOAPAction"/&gt;
                                    &lt;/L7p:item&gt;
                                    &lt;/L7p:Rules&gt;
                                    &lt;/L7p:RequestHeaderRules&gt;
                                    &lt;L7p:RequestParamRules httpPassthroughRuleSet="included"&gt;
                                    &lt;L7p:ForwardAll booleanValue="true"/&gt;
                                    &lt;L7p:Rules httpPassthroughRules="included"/&gt;
                                    &lt;/L7p:RequestParamRules&gt;
                                    &lt;L7p:ResponseHeaderRules httpPassthroughRuleSet="included"&gt;
                                    &lt;L7p:ForwardAll booleanValue="true"/&gt;
                                    &lt;L7p:Rules httpPassthroughRules="included"&gt;
                                    &lt;L7p:item httpPassthroughRule="included"&gt;
                                    &lt;L7p:Name stringValue="Set-Cookie"/&gt;
                                    &lt;/L7p:item&gt;
                                    &lt;/L7p:Rules&gt;
                                    &lt;/L7p:ResponseHeaderRules&gt;
                                    &lt;L7p:SamlAssertionVersion intValue="2"/&gt;
                                    &lt;/L7p:HttpRoutingAssertion&gt;
                                    &lt;L7p:SetVariable&gt;
                                    &lt;L7p:Base64Expression stringValue="LTE="/&gt;
                                    &lt;L7p:DataType variableDataType="int"/&gt;
                                    &lt;L7p:VariableToSet stringValue="feedback.current.status"/&gt;
                                    &lt;/L7p:SetVariable&gt;
                                &lt;/wsp:OneOrMore&gt;
                                &lt;L7p:CommentAssertion&gt;
                                    &lt;L7p:Comment stringValue="--------------------------------------------"/&gt;
                                &lt;/L7p:CommentAssertion&gt;
                                &lt;L7p:CommentAssertion&gt;
                                    &lt;L7p:Comment stringValue="              Processing Response"/&gt;
                                &lt;/L7p:CommentAssertion&gt;
                                &lt;L7p:CommentAssertion&gt;
                                    &lt;L7p:Comment stringValue="--------------------------------------------"/&gt;
                                &lt;/L7p:CommentAssertion&gt;
                                &lt;wsp:OneOrMore wsp:Usage="Required"&gt;
                                    &lt;wsp:All wsp:Usage="Required"&gt;
                                    &lt;L7p:ComparisonAssertion&gt;
                                    &lt;L7p:CaseSensitive booleanValue="false"/&gt;
                                    &lt;L7p:Expression1 stringValue="${response.contentType}"/&gt;
                                    &lt;L7p:Operator operatorNull="null"/&gt;
                                    &lt;L7p:Predicates predicates="included"&gt;
                                    &lt;L7p:item dataType="included"&gt;
                                    &lt;L7p:Type variableDataType="string"/&gt;
                                    &lt;/L7p:item&gt;
                                    &lt;L7p:item binary="included"&gt;
                                    &lt;L7p:Negated booleanValue="true"/&gt;
                                    &lt;L7p:Operator operator="CONTAINS"/&gt;
                                    &lt;L7p:RightValue stringValue="application/json"/&gt;
                                    &lt;/L7p:item&gt;
                                    &lt;/L7p:Predicates&gt;
                                    &lt;/L7p:ComparisonAssertion&gt;
                                    &lt;L7p:SetVariable&gt;
                                    &lt;L7p:Base64Expression stringValue="MQ=="/&gt;
                                    &lt;L7p:DataType variableDataType="int"/&gt;
                                    &lt;L7p:VariableToSet stringValue="isNonJson"/&gt;
                                    &lt;/L7p:SetVariable&gt;
                                    &lt;/wsp:All&gt;
                                    &lt;L7p:TrueAssertion/&gt;
                                &lt;/wsp:OneOrMore&gt;
                                &lt;wsp:OneOrMore wsp:Usage="Required"&gt;
                                    &lt;wsp:All wsp:Usage="Required"&gt;
                                    &lt;L7p:ComparisonAssertion&gt;
                                    &lt;L7p:CaseSensitive booleanValue="false"/&gt;
                                    &lt;L7p:Expression1 stringValue="${feedback.current.status}"/&gt;
                                    &lt;L7p:Operator operatorNull="null"/&gt;
                                    &lt;L7p:Predicates predicates="included"&gt;
                                    &lt;L7p:item dataType="included"&gt;
                                    &lt;L7p:Type variableDataType="int"/&gt;
                                    &lt;/L7p:item&gt;
                                    &lt;L7p:item binary="included"&gt;
                                    &lt;L7p:Negated booleanValue="true"/&gt;
                                    &lt;L7p:RightValue stringValue="-1"/&gt;
                                    &lt;/L7p:item&gt;
                                    &lt;/L7p:Predicates&gt;
                                    &lt;/L7p:ComparisonAssertion&gt;
                                    &lt;L7p:SetVariable&gt;
                                    &lt;L7p:Base64Expression stringValue="JHtyZXNwb25zZX0="/&gt;
                                    &lt;L7p:ContentType stringValue="text/xml; charset=utf-8"/&gt;
                                    &lt;L7p:DataType variableDataType="message"/&gt;
                                    &lt;L7p:VariableToSet stringValue="responseData"/&gt;
                                    &lt;/L7p:SetVariable&gt;
                                    &lt;wsp:OneOrMore wsp:Usage="Required"&gt;
                                    &lt;wsp:All wsp:Usage="Required"&gt;
                                    &lt;L7p:ComparisonAssertion&gt;
                                    &lt;L7p:CaseSensitive booleanValue="false"/&gt;
                                    &lt;L7p:Expression1 stringValue="${routeResponseTransform.mainpart}"/&gt;
                                    &lt;L7p:Operator operatorNull="null"/&gt;
                                    &lt;L7p:Predicates predicates="included"&gt;
                                    &lt;L7p:item dataType="included"&gt;
                                    &lt;L7p:Type variableDataType="string"/&gt;
                                    &lt;/L7p:item&gt;
                                    &lt;L7p:item binary="included"&gt;
                                    &lt;L7p:Negated booleanValue="true"/&gt;

                                    &lt;L7p:RightValue stringValue="null"/&gt;
                                    &lt;/L7p:item&gt;
                                    &lt;/L7p:Predicates&gt;
                                    &lt;/L7p:ComparisonAssertion&gt;
                                    &lt;L7p:ItemLookupByIndex&gt;
                                    &lt;L7p:IndexValue stringValue="${strategy.iterations}"/&gt;

                                    &lt;L7p:MultivaluedVariableName stringValue="routeResponseTransforms"/&gt;

                                    &lt;L7p:OutputVariableName stringValue="transformSpec"/&gt;
                                    &lt;/L7p:ItemLookupByIndex&gt;
                                    &lt;L7p:SetVariable&gt;

                                    &lt;L7p:Base64Expression stringValue="JHt0cmFuc2Zvcm1TcGVjfQ=="/&gt;
                                    &lt;L7p:ContentType stringValue="application/json; charset=utf-8"/&gt;
                                    &lt;L7p:DataType variableDataType="message"/&gt;
                                    &lt;L7p:VariableToSet stringValue="transformSpecMsg"/&gt;
                                    &lt;/L7p:SetVariable&gt;
                                    &lt;L7p:CommentAssertion&gt;
                                    &lt;L7p:Comment stringValue="----------------------------------------------------------------------------------------"/&gt;
                                    &lt;/L7p:CommentAssertion&gt;
                                    &lt;L7p:CommentAssertion&gt;
                                    &lt;L7p:Comment stringValue="              Check on the 'responseTransform' Jolt 'operation'"/&gt;
                                    &lt;/L7p:CommentAssertion&gt;
                                    &lt;L7p:CommentAssertion&gt;
                                    &lt;L7p:Comment stringValue="----------------------------------------------------------------------------------------"/&gt;
                                    &lt;/L7p:CommentAssertion&gt;
                                    &lt;L7p:EvaluateJsonPathExpression&gt;

                                    &lt;L7p:AssertionComment assertionComment="included"&gt;
                                    &lt;L7p:Properties mapValue="included"&gt;
                                    &lt;L7p:entry&gt;
                                    &lt;L7p:key stringValue="RIGHT.COMMENT"/&gt;

                                    &lt;L7p:value stringValue="Get 'routeList' of the current 'aggregator'"/&gt;
                                    &lt;/L7p:entry&gt;
                                    &lt;/L7p:Properties&gt;
                                    &lt;/L7p:AssertionComment&gt;
                                    &lt;L7p:Expression stringValue="$.[*].operation"/&gt;

                                    &lt;L7p:OtherTargetMessageVariable stringValue="transformSpecMsg"/&gt;
                                    &lt;L7p:Target target="OTHER"/&gt;
                                    &lt;L7p:VariablePrefix stringValue="joltOperations"/&gt;
                                    &lt;/L7p:EvaluateJsonPathExpression&gt;
                                    &lt;wsp:OneOrMore wsp:Usage="Required"&gt;
                                    &lt;L7p:ComparisonAssertion&gt;

                                    &lt;L7p:CaseSensitive booleanValue="false"/&gt;
                                    &lt;L7p:Expression1 stringValue="${joltOperations.result}"/&gt;
                                    &lt;L7p:Operator operatorNull="null"/&gt;
                                    &lt;L7p:Predicates predicates="included"&gt;
                                    &lt;L7p:item dataType="included"&gt;

                                    &lt;L7p:Type variableDataType="string"/&gt;
                                    &lt;/L7p:item&gt;
                                    &lt;L7p:item binary="included"&gt;

                                    &lt;L7p:Negated booleanValue="true"/&gt;

                                    &lt;L7p:RightValue stringValue="null"/&gt;
                                    &lt;/L7p:item&gt;
                                    &lt;/L7p:Predicates&gt;
                                    &lt;/L7p:ComparisonAssertion&gt;
                                    &lt;wsp:All wsp:Usage="Required"&gt;
                                    &lt;L7p:CustomizeErrorResponse&gt;
                                    &lt;L7p:Content stringValueReference="inline"&gt;&lt;![CDATA[{
  "errorMessage" : "Unrecognized data object within the 'orchestrator'.  Expect 'operation' in 'responseTransform'."
}]]&gt;&lt;/L7p:Content&gt;

                                    &lt;L7p:ContentType stringValue="application/json"/&gt;

                                    &lt;L7p:ExtraHeaders nameValuePairArray="included"/&gt;
                                    &lt;/L7p:CustomizeErrorResponse&gt;
                                    &lt;L7p:FalseAssertion/&gt;
                                    &lt;/wsp:All&gt;
                                    &lt;/wsp:OneOrMore&gt;
                                    &lt;L7p:ForEachLoop
                                    L7p:Usage="Required"
                                    loopVariable="joltOperations.results" variablePrefix="joltOperation"&gt;
                                    &lt;L7p:SetVariable&gt;

                                    &lt;L7p:Base64Expression stringValue="JHtqb2x0T3BlcmF0aW9uLmN1cnJlbnR9"/&gt;

                                    &lt;L7p:VariableToSet stringValue="currentOperation"/&gt;
                                    &lt;/L7p:SetVariable&gt;
                                    &lt;wsp:OneOrMore wsp:Usage="Required"&gt;
                                    &lt;wsp:All wsp:Usage="Required"&gt;
                                    &lt;L7p:ComparisonAssertion&gt;

                                    &lt;L7p:CaseSensitive booleanValue="false"/&gt;

                                    &lt;L7p:Expression1 stringValue="${currentOperation}"/&gt;

                                    &lt;L7p:Operator operatorNull="null"/&gt;

                                    &lt;L7p:Predicates predicates="included"&gt;

                                    &lt;L7p:item dataType="included"&gt;

                                    &lt;L7p:Type variableDataType="string"/&gt;
                                    &lt;/L7p:item&gt;

                                    &lt;L7p:item binary="included"&gt;

                                    &lt;L7p:Negated booleanValue="true"/&gt;

                                    &lt;L7p:RightValue stringValue="shift"/&gt;
                                    &lt;/L7p:item&gt;

                                    &lt;L7p:item binary="included"&gt;

                                    &lt;L7p:Negated booleanValue="true"/&gt;

                                    &lt;L7p:RightValue stringValue="default"/&gt;
                                    &lt;/L7p:item&gt;

                                    &lt;L7p:item binary="included"&gt;

                                    &lt;L7p:Negated booleanValue="true"/&gt;

                                    &lt;L7p:RightValue stringValue="remove"/&gt;
                                    &lt;/L7p:item&gt;
                                    &lt;/L7p:Predicates&gt;
                                    &lt;/L7p:ComparisonAssertion&gt;
                                    &lt;L7p:SetVariable&gt;

                                    &lt;L7p:Base64Expression stringValue="MQ=="/&gt;

                                    &lt;L7p:DataType variableDataType="int"/&gt;

                                    &lt;L7p:VariableToSet stringValue="isInvalidJoltOperation"/&gt;
                                    &lt;/L7p:SetVariable&gt;
                                    &lt;L7p:SetVariable&gt;

                                    &lt;L7p:Base64Expression stringValue="dHJ1ZQ=="/&gt;

                                    &lt;L7p:VariableToSet stringValue="isInvalidJoltOperation.break"/&gt;
                                    &lt;/L7p:SetVariable&gt;
                                    &lt;/wsp:All&gt;
                                    &lt;L7p:TrueAssertion/&gt;
                                    &lt;/wsp:OneOrMore&gt;
                                    &lt;/L7p:ForEachLoop&gt;
                                    &lt;wsp:OneOrMore wsp:Usage="Required"&gt;
                                    &lt;L7p:ComparisonAssertion&gt;

                                    &lt;L7p:CaseSensitive booleanValue="false"/&gt;
                                    &lt;L7p:Expression1 stringValue="${isInvalidJoltOperation}"/&gt;
                                    &lt;L7p:Operator operatorNull="null"/&gt;
                                    &lt;L7p:Predicates predicates="included"&gt;
                                    &lt;L7p:item dataType="included"&gt;

                                    &lt;L7p:Type variableDataType="int"/&gt;
                                    &lt;/L7p:item&gt;
                                    &lt;L7p:item binary="included"&gt;

                                    &lt;L7p:RightValue stringValue="0"/&gt;
                                    &lt;/L7p:item&gt;
                                    &lt;/L7p:Predicates&gt;
                                    &lt;/L7p:ComparisonAssertion&gt;
                                    &lt;wsp:All wsp:Usage="Required"&gt;
                                    &lt;L7p:CustomizeErrorResponse&gt;
                                    &lt;L7p:Content stringValueReference="inline"&gt;&lt;![CDATA[{
  "errorMessage" : "Unrecognized data object within the 'orchestrator'.  Expect 'shift', 'default' or 'remove' in 'responseTransform' 'operation'."
}]]&gt;&lt;/L7p:Content&gt;

                                    &lt;L7p:ContentType stringValue="application/json"/&gt;

                                    &lt;L7p:ExtraHeaders nameValuePairArray="included"/&gt;
                                    &lt;/L7p:CustomizeErrorResponse&gt;
                                    &lt;L7p:FalseAssertion/&gt;
                                    &lt;/wsp:All&gt;
                                    &lt;/wsp:OneOrMore&gt;
                                    &lt;L7p:CommentAssertion&gt;
                                    &lt;L7p:Comment stringValue="----------------------------------------------------------------------------------------"/&gt;
                                    &lt;/L7p:CommentAssertion&gt;
                                    &lt;L7p:CommentAssertion&gt;
                                    &lt;L7p:Comment stringValue="              Check on the 'responseTransform' Jolt 'spec'"/&gt;
                                    &lt;/L7p:CommentAssertion&gt;
                                    &lt;L7p:CommentAssertion&gt;
                                    &lt;L7p:Comment stringValue="----------------------------------------------------------------------------------------"/&gt;
                                    &lt;/L7p:CommentAssertion&gt;
                                    &lt;L7p:EvaluateJsonPathExpression&gt;

                                    &lt;L7p:AssertionComment assertionComment="included"&gt;
                                    &lt;L7p:Properties mapValue="included"&gt;
                                    &lt;L7p:entry&gt;
                                    &lt;L7p:key stringValue="RIGHT.COMMENT"/&gt;

                                    &lt;L7p:value stringValue="Get 'routeList' of the current 'aggregator'"/&gt;
                                    &lt;/L7p:entry&gt;
                                    &lt;/L7p:Properties&gt;
                                    &lt;/L7p:AssertionComment&gt;
                                    &lt;L7p:Expression stringValue="$.[*].spec"/&gt;

                                    &lt;L7p:OtherTargetMessageVariable stringValue="transformSpecMsg"/&gt;
                                    &lt;L7p:Target target="OTHER"/&gt;
                                    &lt;L7p:VariablePrefix stringValue="joltSpecs"/&gt;
                                    &lt;/L7p:EvaluateJsonPathExpression&gt;
                                    &lt;wsp:OneOrMore wsp:Usage="Required"&gt;
                                    &lt;L7p:ComparisonAssertion&gt;

                                    &lt;L7p:CaseSensitive booleanValue="false"/&gt;
                                    &lt;L7p:Expression1 stringValue="${joltSpecs.result}"/&gt;
                                    &lt;L7p:Operator operatorNull="null"/&gt;
                                    &lt;L7p:Predicates predicates="included"&gt;
                                    &lt;L7p:item dataType="included"&gt;

                                    &lt;L7p:Type variableDataType="string"/&gt;
                                    &lt;/L7p:item&gt;
                                    &lt;L7p:item binary="included"&gt;

                                    &lt;L7p:Negated booleanValue="true"/&gt;

                                    &lt;L7p:RightValue stringValue="null"/&gt;
                                    &lt;/L7p:item&gt;
                                    &lt;/L7p:Predicates&gt;
                                    &lt;/L7p:ComparisonAssertion&gt;
                                    &lt;wsp:All wsp:Usage="Required"&gt;
                                    &lt;L7p:CustomizeErrorResponse&gt;
                                    &lt;L7p:Content stringValueReference="inline"&gt;&lt;![CDATA[{
  "errorMessage" : "Unrecognized data object within the 'orchestrator'.  Expect 'spec' in 'responseTransform'."
}]]&gt;&lt;/L7p:Content&gt;

                                    &lt;L7p:ContentType stringValue="application/json"/&gt;

                                    &lt;L7p:ExtraHeaders nameValuePairArray="included"/&gt;
                                    &lt;/L7p:CustomizeErrorResponse&gt;
                                    &lt;L7p:FalseAssertion/&gt;
                                    &lt;/wsp:All&gt;
                                    &lt;/wsp:OneOrMore&gt;
                                    &lt;L7p:CommentAssertion&gt;
                                    &lt;L7p:Comment stringValue="------------------End check------------------------------------------------------------"/&gt;
                                    &lt;/L7p:CommentAssertion&gt;
                                    &lt;L7p:CommentAssertion&gt;
                                    &lt;L7p:Comment stringValue="----------------------------------------------------------------------------------------"/&gt;
                                    &lt;/L7p:CommentAssertion&gt;
                                    &lt;L7p:CommentAssertion&gt;
                                    &lt;L7p:Comment stringValue="              Retrieve and apply 'responseTransform' to the response"/&gt;
                                    &lt;/L7p:CommentAssertion&gt;
                                    &lt;L7p:CommentAssertion&gt;
                                    &lt;L7p:Comment stringValue="----------------------------------------------------------------------------------------"/&gt;
                                    &lt;/L7p:CommentAssertion&gt;
                                    &lt;L7p:JsonJolt&gt;

                                    &lt;L7p:OtherTargetMessageVariable stringValue="responseData"/&gt;

                                    &lt;L7p:SchemaExpression stringValue="${transformSpec}"/&gt;
                                    &lt;L7p:Target target="OTHER"/&gt;
                                    &lt;/L7p:JsonJolt&gt;
                                    &lt;L7p:CommentAssertion&gt;
                                    &lt;L7p:Comment stringValue="============================="/&gt;
                                    &lt;/L7p:CommentAssertion&gt;
                                    &lt;/wsp:All&gt;
                                    &lt;L7p:TrueAssertion/&gt;
                                    &lt;/wsp:OneOrMore&gt;
                                    &lt;L7p:SetVariable&gt;
                                    &lt;L7p:Base64Expression stringValue="JHthc3NlcnRpb24ubGF0ZW5jeS5tc30="/&gt;
                                    &lt;L7p:DataType variableDataType="int"/&gt;
                                    &lt;L7p:VariableToSet stringValue="feedback.current.latency"/&gt;
                                    &lt;/L7p:SetVariable&gt;
                                    &lt;L7p:CommentAssertion&gt;
                                    &lt;L7p:Comment stringValue="--------------------------------------------"/&gt;
                                    &lt;/L7p:CommentAssertion&gt;
                                    &lt;L7p:CommentAssertion&gt;
                                    &lt;L7p:Comment stringValue="            Aggregating Response"/&gt;
                                    &lt;/L7p:CommentAssertion&gt;
                                    &lt;L7p:CommentAssertion&gt;
                                    &lt;L7p:Comment stringValue="--------------------------------------------"/&gt;
                                    &lt;/L7p:CommentAssertion&gt;
                                    &lt;wsp:OneOrMore wsp:Usage="Required"&gt;
                                    &lt;wsp:All wsp:Usage="Required"&gt;
                                    &lt;L7p:ComparisonAssertion&gt;
                                    &lt;L7p:CaseSensitive booleanValue="false"/&gt;
                                    &lt;L7p:Expression1 stringValue="${feedback.result.data}"/&gt;
                                    &lt;L7p:Operator operatorNull="null"/&gt;
                                    &lt;L7p:Predicates predicates="included"&gt;
                                    &lt;L7p:item dataType="included"&gt;
                                    &lt;L7p:Type variableDataType="string"/&gt;
                                    &lt;/L7p:item&gt;
                                    &lt;L7p:item binary="included"&gt;

                                    &lt;L7p:Operator operator="EMPTY"/&gt;

                                    &lt;L7p:RightValue stringValue=""/&gt;
                                    &lt;/L7p:item&gt;
                                    &lt;/L7p:Predicates&gt;
                                    &lt;/L7p:ComparisonAssertion&gt;
                                    &lt;L7p:SetVariable&gt;

                                    &lt;L7p:Base64Expression stringValue="JHtyZXNwb25zZURhdGEubWFpbnBhcnR9"/&gt;
                                    &lt;L7p:VariableToSet stringValue="feedback.result.data"/&gt;
                                    &lt;/L7p:SetVariable&gt;
                                    &lt;/wsp:All&gt;
                                    &lt;wsp:All wsp:Usage="Required"&gt;
                                    &lt;L7p:SetVariable&gt;

                                    &lt;L7p:Base64Expression stringValue="JHtmZWVkYmFjay5yZXN1bHQuZGF0YX0sJHtyZXNwb25zZURhdGEubWFpbnBhcnR9"/&gt;
                                    &lt;L7p:VariableToSet stringValue="feedback.result.data"/&gt;
                                    &lt;/L7p:SetVariable&gt;
                                    &lt;/wsp:All&gt;
                                    &lt;/wsp:OneOrMore&gt;
                                    &lt;wsp:OneOrMore wsp:Usage="Required"&gt;
                                    &lt;wsp:All wsp:Usage="Required"&gt;
                                    &lt;L7p:ComparisonAssertion&gt;
                                    &lt;L7p:CaseSensitive booleanValue="false"/&gt;
                                    &lt;L7p:Expression1 stringValue="${feedback.result.original}"/&gt;
                                    &lt;L7p:Operator operatorNull="null"/&gt;
                                    &lt;L7p:Predicates predicates="included"&gt;
                                    &lt;L7p:item dataType="included"&gt;
                                    &lt;L7p:Type variableDataType="string"/&gt;
                                    &lt;/L7p:item&gt;
                                    &lt;L7p:item binary="included"&gt;

                                    &lt;L7p:Operator operator="EMPTY"/&gt;

                                    &lt;L7p:RightValue stringValue=""/&gt;
                                    &lt;/L7p:item&gt;
                                    &lt;/L7p:Predicates&gt;
                                    &lt;/L7p:ComparisonAssertion&gt;
                                    &lt;L7p:SetVariable&gt;

                                    &lt;L7p:Base64Expression stringValue="JHtyZXNwb25zZS5tYWlucGFydH0="/&gt;
                                    &lt;L7p:VariableToSet stringValue="feedback.result.original"/&gt;
                                    &lt;/L7p:SetVariable&gt;
                                    &lt;/wsp:All&gt;
                                    &lt;wsp:All wsp:Usage="Required"&gt;
                                    &lt;L7p:SetVariable&gt;

                                    &lt;L7p:Base64Expression stringValue="JHtmZWVkYmFjay5yZXN1bHQub3JpZ2luYWx9LCR7cmVzcG9uc2UubWFpbnBhcnR9"/&gt;
                                    &lt;L7p:VariableToSet stringValue="feedback.result.original"/&gt;
                                    &lt;/L7p:SetVariable&gt;
                                    &lt;/wsp:All&gt;
                                    &lt;/wsp:OneOrMore&gt;
                                    &lt;/wsp:All&gt;
                                    &lt;wsp:All wsp:Usage="Required"&gt;
                                    &lt;L7p:SetVariable&gt;
                                    &lt;L7p:Base64Expression stringValue="InJvdXRpbmcgdG8gJHtjdXJyZW50Um91dGV9IEZBSUxFRC4gIEh0dHAgUmVzcG9uc2UgQ29kZTogJHtodHRwUm91dGluZy5yZWFzb25Db2RlfSI="/&gt;
                                    &lt;L7p:VariableToSet stringValue="responseMessage"/&gt;
                                    &lt;/L7p:SetVariable&gt;
                                    &lt;L7p:CustomizeErrorResponse&gt;
                                    &lt;L7p:Content stringValueReference="inline"&gt;&lt;![CDATA[{
 "response": ${responseMessage}
}]]&gt;&lt;/L7p:Content&gt;
                                    &lt;L7p:ContentType stringValue="application/json"/&gt;
                                    &lt;L7p:ExtraHeaders nameValuePairArray="included"/&gt;
                                    &lt;/L7p:CustomizeErrorResponse&gt;
                                    &lt;L7p:HardcodedResponse&gt;
                                    &lt;L7p:Base64ResponseBody stringValue="ewogInJlc3BvbnNlIjoke3Jlc3BvbnNlTWVzc2FnZX0KfQ=="/&gt;
                                    &lt;L7p:Enabled booleanValue="false"/&gt;
                                    &lt;L7p:ResponseContentType stringValue="application/json; charset=UTF-8"/&gt;
                                    &lt;L7p:ResponseStatus stringValue="500"/&gt;
                                    &lt;/L7p:HardcodedResponse&gt;
                                    &lt;L7p:FalseAssertion/&gt;
                                    &lt;/wsp:All&gt;
                                &lt;/wsp:OneOrMore&gt;
                                &lt;L7p:CommentAssertion&gt;
                                    &lt;L7p:Comment stringValue="--------------------------------------------"/&gt;
                                &lt;/L7p:CommentAssertion&gt;
                                &lt;L7p:CommentAssertion&gt;
                                    &lt;L7p:Comment stringValue="             Done Routing for each URL"/&gt;
                                &lt;/L7p:CommentAssertion&gt;
                                &lt;L7p:CommentAssertion&gt;
                                    &lt;L7p:Comment stringValue="--------------------------------------------"/&gt;
                                &lt;/L7p:CommentAssertion&gt;
                                &lt;wsp:OneOrMore wsp:Usage="Required"&gt;
                                    &lt;L7p:ComparisonAssertion&gt;
                                    &lt;L7p:CaseSensitive booleanValue="false"/&gt;
                                    &lt;L7p:Expression1 stringValue="${feedback.current.latency}"/&gt;
                                    &lt;L7p:Operator operatorNull="null"/&gt;
                                    &lt;L7p:Predicates predicates="included"&gt;
                                    &lt;L7p:item dataType="included"&gt;
                                    &lt;L7p:Type variableDataType="int"/&gt;
                                    &lt;/L7p:item&gt;
                                    &lt;L7p:item binary="included"&gt;
                                    &lt;L7p:Negated booleanValue="true"/&gt;
                                    &lt;L7p:Operator operator="EMPTY"/&gt;
                                    &lt;L7p:RightValue stringValue=""/&gt;
                                    &lt;/L7p:item&gt;
                                    &lt;L7p:item binary="included"&gt;
                                    &lt;L7p:RightValue stringValue="-1"/&gt;
                                    &lt;/L7p:item&gt;
                                    &lt;/L7p:Predicates&gt;
                                    &lt;/L7p:ComparisonAssertion&gt;
                                    &lt;L7p:SetVariable&gt;
                                    &lt;L7p:Base64Expression stringValue="dHJ1ZQ=="/&gt;
                                    &lt;L7p:VariableToSet stringValue="routeList.break"/&gt;
                                    &lt;/L7p:SetVariable&gt;
                                &lt;/wsp:OneOrMore&gt;
                            &lt;/L7p:ForEachLoop&gt;
                            &lt;L7p:CommentAssertion&gt;
                                &lt;L7p:Comment stringValue="--------------------------------------------"/&gt;
                            &lt;/L7p:CommentAssertion&gt;
                            &lt;L7p:CommentAssertion&gt;
                                &lt;L7p:Comment stringValue="                Accumulating Aggregator Response"/&gt;
                            &lt;/L7p:CommentAssertion&gt;
                            &lt;L7p:CommentAssertion&gt;
                                &lt;L7p:Comment stringValue="--------------------------------------------"/&gt;
                            &lt;/L7p:CommentAssertion&gt;
                            &lt;wsp:OneOrMore wsp:Usage="Required"&gt;
                                &lt;wsp:All wsp:Usage="Required"&gt;
                                    &lt;L7p:ComparisonAssertion&gt;
                                    &lt;L7p:CaseSensitive booleanValue="false"/&gt;
                                    &lt;L7p:Expression1 stringValue="${aggregator.result}"/&gt;
                                    &lt;L7p:Operator operatorNull="null"/&gt;
                                    &lt;L7p:Predicates predicates="included"&gt;
                                    &lt;L7p:item dataType="included"&gt;
                                    &lt;L7p:Type variableDataType="string"/&gt;
                                    &lt;/L7p:item&gt;
                                    &lt;L7p:item binary="included"&gt;
                                    &lt;L7p:Negated booleanValue="true"/&gt;
                                    &lt;L7p:Operator operator="EMPTY"/&gt;
                                    &lt;L7p:RightValue stringValue=""/&gt;
                                    &lt;/L7p:item&gt;
                                    &lt;/L7p:Predicates&gt;
                                    &lt;/L7p:ComparisonAssertion&gt;
                                    &lt;L7p:SetVariable&gt;
                                    &lt;L7p:AssertionComment assertionComment="included"&gt;
                                    &lt;L7p:Properties mapValue="included"&gt;
                                    &lt;L7p:entry&gt;
                                    &lt;L7p:key stringValue="RIGHT.COMMENT"/&gt;
                                    &lt;L7p:value stringValue="aggregated data within an &amp;quot;aggregator&amp;quot;.  The aggregated data is the result of concatenation of the  routeHttp's responses  within the aggregator."/&gt;
                                    &lt;/L7p:entry&gt;
                                    &lt;/L7p:Properties&gt;
                                    &lt;/L7p:AssertionComment&gt;
                                    &lt;L7p:Base64Expression stringValue="JHthZ2dyZWdhdG9yLnJlc3VsdH0sDQoke2ZlZWRiYWNrLnJlc3VsdC5kYXRhfQ=="/&gt;
                                    &lt;L7p:VariableToSet stringValue="aggregator.result"/&gt;
                                    &lt;/L7p:SetVariable&gt;
                                &lt;/wsp:All&gt;
                                &lt;wsp:All wsp:Usage="Required"&gt;
                                    &lt;L7p:SetVariable&gt;
                                    &lt;L7p:AssertionComment assertionComment="included"&gt;
                                    &lt;L7p:Properties mapValue="included"&gt;
                                    &lt;L7p:entry&gt;
                                    &lt;L7p:key stringValue="RIGHT.COMMENT"/&gt;
                                    &lt;L7p:value stringValue="aggregated data within an &amp;quot;aggregator&amp;quot;.  The aggregated data is the result of concatenation of the  routeHttp's responses  within the aggregator."/&gt;
                                    &lt;/L7p:entry&gt;
                                    &lt;/L7p:Properties&gt;
                                    &lt;/L7p:AssertionComment&gt;
                                    &lt;L7p:Base64Expression stringValue="JHtmZWVkYmFjay5yZXN1bHQuZGF0YX0="/&gt;
                                    &lt;L7p:VariableToSet stringValue="aggregator.result"/&gt;
                                    &lt;/L7p:SetVariable&gt;
                                &lt;/wsp:All&gt;
                            &lt;/wsp:OneOrMore&gt;
                            &lt;wsp:OneOrMore wsp:Usage="Required"&gt;
                                &lt;wsp:All wsp:Usage="Required"&gt;
                                    &lt;L7p:ComparisonAssertion&gt;
                                    &lt;L7p:CaseSensitive booleanValue="false"/&gt;
                                    &lt;L7p:Expression1 stringValue="${orchestrator.result}"/&gt;
                                    &lt;L7p:Operator operatorNull="null"/&gt;
                                    &lt;L7p:Predicates predicates="included"&gt;
                                    &lt;L7p:item dataType="included"&gt;
                                    &lt;L7p:Type variableDataType="string"/&gt;
                                    &lt;/L7p:item&gt;
                                    &lt;L7p:item binary="included"&gt;
                                    &lt;L7p:Negated booleanValue="true"/&gt;
                                    &lt;L7p:Operator operator="EMPTY"/&gt;
                                    &lt;L7p:RightValue stringValue=""/&gt;
                                    &lt;/L7p:item&gt;
                                    &lt;/L7p:Predicates&gt;
                                    &lt;/L7p:ComparisonAssertion&gt;
                                    &lt;L7p:SetVariable&gt;
                                    &lt;L7p:AssertionComment assertionComment="included"&gt;
                                    &lt;L7p:Properties mapValue="included"&gt;
                                    &lt;L7p:entry&gt;
                                    &lt;L7p:key stringValue="RIGHT.COMMENT"/&gt;
                                    &lt;L7p:value stringValue="aggregated data within an &amp;quot;aggregator&amp;quot;.  The aggregated data is the result of concatenation of the  routeHttp's responses  within the aggregator."/&gt;
                                    &lt;/L7p:entry&gt;
                                    &lt;/L7p:Properties&gt;
                                    &lt;/L7p:AssertionComment&gt;
                                    &lt;L7p:Base64Expression stringValue="JHtvcmNoZXN0cmF0b3IucmVzdWx0fSwNCiR7YWdncmVnYXRvci5yZXN1bHR9"/&gt;
                                    &lt;L7p:VariableToSet stringValue="orchestrator.result"/&gt;
                                    &lt;/L7p:SetVariable&gt;
                                &lt;/wsp:All&gt;
                                &lt;wsp:All wsp:Usage="Required"&gt;
                                    &lt;L7p:SetVariable&gt;
                                    &lt;L7p:AssertionComment assertionComment="included"&gt;
                                    &lt;L7p:Properties mapValue="included"&gt;
                                    &lt;L7p:entry&gt;
                                    &lt;L7p:key stringValue="RIGHT.COMMENT"/&gt;
                                    &lt;L7p:value stringValue="aggregated data within an &amp;quot;aggregator&amp;quot;.  The aggregated data is the result of concatenation of the  routeHttp's responses  within the aggregator."/&gt;
                                    &lt;/L7p:entry&gt;
                                    &lt;/L7p:Properties&gt;
                                    &lt;/L7p:AssertionComment&gt;
                                    &lt;L7p:Base64Expression stringValue="JHthZ2dyZWdhdG9yLnJlc3VsdH0="/&gt;
                                    &lt;L7p:VariableToSet stringValue="orchestrator.result"/&gt;
                                    &lt;/L7p:SetVariable&gt;
                                &lt;/wsp:All&gt;
                            &lt;/wsp:OneOrMore&gt;
                        &lt;/wsp:All&gt;
                    &lt;/wsp:OneOrMore&gt;
                    &lt;L7p:assertionComment&gt;
                        &lt;L7p:Properties mapValue="included"&gt;
                            &lt;L7p:entry&gt;
                                &lt;L7p:key stringValue="RIGHT.COMMENT"/&gt;
                                &lt;L7p:value stringValue="                        Handle 'aggregator'"/&gt;
                            &lt;/L7p:entry&gt;
                        &lt;/L7p:Properties&gt;
                    &lt;/L7p:assertionComment&gt;
                &lt;/wsp:All&gt;
                &lt;wsp:All wsp:Usage="Required"&gt;
                    &lt;L7p:EvaluateJsonPathExpression&gt;
                        &lt;L7p:Expression stringValue="$.orchestrator_transform"/&gt;
                        &lt;L7p:OtherTargetMessageVariable stringValue="aggregatorMsg"/&gt;
                        &lt;L7p:Target target="OTHER"/&gt;
                        &lt;L7p:VariablePrefix stringValue="result_transform"/&gt;
                    &lt;/L7p:EvaluateJsonPathExpression&gt;
                    &lt;L7p:SetVariable&gt;
                        &lt;L7p:Base64Expression stringValue="JHthZ2dyZWdhdG9yTXNnfQ=="/&gt;
                        &lt;L7p:ContentType stringValue="application/json; charset=utf-8"/&gt;
                        &lt;L7p:DataType variableDataType="message"/&gt;
                        &lt;L7p:VariableToSet stringValue="orchestratorTransform"/&gt;
                    &lt;/L7p:SetVariable&gt;
                    &lt;L7p:CommentAssertion&gt;
                        &lt;L7p:Comment stringValue="------------------------------------------------------------------------------"/&gt;
                    &lt;/L7p:CommentAssertion&gt;
                    &lt;L7p:CommentAssertion&gt;
                        &lt;L7p:Comment stringValue="                Handle 'orchestratorTransform'"/&gt;
                    &lt;/L7p:CommentAssertion&gt;
                    &lt;L7p:CommentAssertion&gt;
                        &lt;L7p:Comment stringValue="------------------------------------------------------------------------------"/&gt;
                    &lt;/L7p:CommentAssertion&gt;
                    &lt;L7p:JsonJolt&gt;
                        &lt;L7p:AssertionComment assertionComment="included"&gt;
                            &lt;L7p:Properties mapValue="included"&gt;
                                &lt;L7p:entry&gt;
                                    &lt;L7p:key stringValue="RIGHT.COMMENT"/&gt;
                                    &lt;L7p:value stringValue="GET 'orchestratorTransform&amp;quot; from RouteHttp"/&gt;
                                &lt;/L7p:entry&gt;
                            &lt;/L7p:Properties&gt;
                        &lt;/L7p:AssertionComment&gt;
                        &lt;L7p:OtherTargetMessageVariable stringValue="orchestratorTransform"/&gt;
                        &lt;L7p:SchemaExpression stringValueReference="inline"&gt;&lt;![CDATA[[{
  "operation": "shift",
  "spec": {
    "orchestrator_transform": {
      "jolt": ""
    }
  }
}]]]&gt;&lt;/L7p:SchemaExpression&gt;
                        &lt;L7p:Target target="OTHER"/&gt;
                    &lt;/L7p:JsonJolt&gt;
                    &lt;L7p:SetVariable&gt;
                        &lt;L7p:Base64Expression stringValue="WyR7YWdncmVnYXRvci5yZXN1bHR9XQ=="/&gt;
                        &lt;L7p:ContentType stringValue="application/json; charset=utf-8"/&gt;
                        &lt;L7p:DataType variableDataType="message"/&gt;
                        &lt;L7p:VariableToSet stringValue="aggregatedResult"/&gt;
                    &lt;/L7p:SetVariable&gt;
                    &lt;L7p:SetVariable&gt;
                        &lt;L7p:Base64Expression stringValue="JHtvcmNoZXN0cmF0b3JUcmFuc2Zvcm0ubWFpbnBhcnR9"/&gt;
                        &lt;L7p:VariableToSet stringValue="orchestratorTransformSpec"/&gt;
                    &lt;/L7p:SetVariable&gt;
                    &lt;L7p:CommentAssertion&gt;
                        &lt;L7p:Comment stringValue="----------------------------------------------------------------------------------------"/&gt;
                    &lt;/L7p:CommentAssertion&gt;
                    &lt;L7p:CommentAssertion&gt;
                        &lt;L7p:Comment stringValue="                 Check 'orchestratorTransform' Jolt 'operation'"/&gt;
                    &lt;/L7p:CommentAssertion&gt;
                    &lt;L7p:CommentAssertion&gt;
                        &lt;L7p:Comment stringValue="----------------------------------------------------------------------------------------"/&gt;
                    &lt;/L7p:CommentAssertion&gt;
                    &lt;L7p:SetVariable&gt;
                        &lt;L7p:Base64Expression stringValue="JHtvcmNoZXN0cmF0b3JUcmFuc2Zvcm1TcGVjfQ=="/&gt;
                        &lt;L7p:ContentType stringValue="application/json; charset=utf-8"/&gt;
                        &lt;L7p:DataType variableDataType="message"/&gt;
                        &lt;L7p:VariableToSet stringValue="transformSpecMsg"/&gt;
                    &lt;/L7p:SetVariable&gt;
                    &lt;L7p:EvaluateJsonPathExpression&gt;
                        &lt;L7p:AssertionComment assertionComment="included"&gt;
                            &lt;L7p:Properties mapValue="included"&gt;
                                &lt;L7p:entry&gt;
                                    &lt;L7p:key stringValue="RIGHT.COMMENT"/&gt;
                                    &lt;L7p:value stringValue="Get 'routeList' of the current 'aggregator'"/&gt;
                                &lt;/L7p:entry&gt;
                            &lt;/L7p:Properties&gt;
                        &lt;/L7p:AssertionComment&gt;
                        &lt;L7p:Expression stringValue="$.[*].operation"/&gt;
                        &lt;L7p:OtherTargetMessageVariable stringValue="transformSpecMsg"/&gt;
                        &lt;L7p:Target target="OTHER"/&gt;
                        &lt;L7p:VariablePrefix stringValue="joltOperations"/&gt;
                    &lt;/L7p:EvaluateJsonPathExpression&gt;
                    &lt;wsp:OneOrMore wsp:Usage="Required"&gt;
                        &lt;L7p:ComparisonAssertion&gt;
                            &lt;L7p:CaseSensitive booleanValue="false"/&gt;
                            &lt;L7p:Expression1 stringValue="${joltOperations.result}"/&gt;
                            &lt;L7p:Operator operatorNull="null"/&gt;
                            &lt;L7p:Predicates predicates="included"&gt;
                                &lt;L7p:item dataType="included"&gt;
                                    &lt;L7p:Type variableDataType="string"/&gt;
                                &lt;/L7p:item&gt;
                                &lt;L7p:item binary="included"&gt;
                                    &lt;L7p:Negated booleanValue="true"/&gt;
                                    &lt;L7p:RightValue stringValue="null"/&gt;
                                &lt;/L7p:item&gt;
                            &lt;/L7p:Predicates&gt;
                        &lt;/L7p:ComparisonAssertion&gt;
                        &lt;wsp:All wsp:Usage="Required"&gt;
                            &lt;L7p:CustomizeErrorResponse&gt;
                                &lt;L7p:Content stringValueReference="inline"&gt;&lt;![CDATA[{
  "errorMessage" : "Unrecognized data object within the 'orchestrator'.  Expect 'operation' in 'orchestrator_transform'."
}]]&gt;&lt;/L7p:Content&gt;
                                &lt;L7p:ContentType stringValue="application/json"/&gt;
                                &lt;L7p:ExtraHeaders nameValuePairArray="included"/&gt;
                            &lt;/L7p:CustomizeErrorResponse&gt;
                            &lt;L7p:FalseAssertion/&gt;
                        &lt;/wsp:All&gt;
                    &lt;/wsp:OneOrMore&gt;
                    &lt;L7p:ForEachLoop L7p:Usage="Required"
                        loopVariable="joltOperations.results" variablePrefix="joltOperation"&gt;
                        &lt;L7p:SetVariable&gt;
                            &lt;L7p:Base64Expression stringValue="JHtqb2x0T3BlcmF0aW9uLmN1cnJlbnR9"/&gt;
                            &lt;L7p:VariableToSet stringValue="currentOperation"/&gt;
                        &lt;/L7p:SetVariable&gt;
                        &lt;wsp:OneOrMore wsp:Usage="Required"&gt;
                            &lt;wsp:All wsp:Usage="Required"&gt;
                                &lt;L7p:ComparisonAssertion&gt;
                                    &lt;L7p:CaseSensitive booleanValue="false"/&gt;
                                    &lt;L7p:Expression1 stringValue="${currentOperation}"/&gt;
                                    &lt;L7p:Operator operatorNull="null"/&gt;
                                    &lt;L7p:Predicates predicates="included"&gt;
                                    &lt;L7p:item dataType="included"&gt;
                                    &lt;L7p:Type variableDataType="string"/&gt;
                                    &lt;/L7p:item&gt;
                                    &lt;L7p:item binary="included"&gt;
                                    &lt;L7p:Negated booleanValue="true"/&gt;
                                    &lt;L7p:RightValue stringValue="shift"/&gt;
                                    &lt;/L7p:item&gt;
                                    &lt;L7p:item binary="included"&gt;
                                    &lt;L7p:Negated booleanValue="true"/&gt;
                                    &lt;L7p:RightValue stringValue="default"/&gt;
                                    &lt;/L7p:item&gt;
                                    &lt;L7p:item binary="included"&gt;
                                    &lt;L7p:Negated booleanValue="true"/&gt;
                                    &lt;L7p:RightValue stringValue="remove"/&gt;
                                    &lt;/L7p:item&gt;
                                    &lt;/L7p:Predicates&gt;
                                &lt;/L7p:ComparisonAssertion&gt;
                                &lt;L7p:SetVariable&gt;
                                    &lt;L7p:Base64Expression stringValue="MQ=="/&gt;
                                    &lt;L7p:DataType variableDataType="int"/&gt;
                                    &lt;L7p:VariableToSet stringValue="isInvalidJoltOperation"/&gt;
                                &lt;/L7p:SetVariable&gt;
                                &lt;L7p:SetVariable&gt;
                                    &lt;L7p:Base64Expression stringValue="dHJ1ZQ=="/&gt;
                                    &lt;L7p:VariableToSet stringValue="isInvalidJoltOperation.break"/&gt;
                                &lt;/L7p:SetVariable&gt;
                            &lt;/wsp:All&gt;
                            &lt;L7p:TrueAssertion/&gt;
                        &lt;/wsp:OneOrMore&gt;
                    &lt;/L7p:ForEachLoop&gt;
                    &lt;wsp:OneOrMore wsp:Usage="Required"&gt;
                        &lt;L7p:ComparisonAssertion&gt;
                            &lt;L7p:CaseSensitive booleanValue="false"/&gt;
                            &lt;L7p:Expression1 stringValue="${isInvalidJoltOperation}"/&gt;
                            &lt;L7p:Operator operatorNull="null"/&gt;
                            &lt;L7p:Predicates predicates="included"&gt;
                                &lt;L7p:item dataType="included"&gt;
                                    &lt;L7p:Type variableDataType="int"/&gt;
                                &lt;/L7p:item&gt;
                                &lt;L7p:item binary="included"&gt;
                                    &lt;L7p:RightValue stringValue="0"/&gt;
                                &lt;/L7p:item&gt;
                            &lt;/L7p:Predicates&gt;
                        &lt;/L7p:ComparisonAssertion&gt;
                        &lt;wsp:All wsp:Usage="Required"&gt;
                            &lt;L7p:CustomizeErrorResponse&gt;
                                &lt;L7p:Content stringValueReference="inline"&gt;&lt;![CDATA[{
  "errorMessage" : "Unrecognized data object within the 'orchestrator'.  Expect 'shift', 'default' or 'remove' in 'orchestrator_transform' 'operation'."
}]]&gt;&lt;/L7p:Content&gt;
                                &lt;L7p:ContentType stringValue="application/json"/&gt;
                                &lt;L7p:ExtraHeaders nameValuePairArray="included"/&gt;
                            &lt;/L7p:CustomizeErrorResponse&gt;
                            &lt;L7p:FalseAssertion/&gt;
                        &lt;/wsp:All&gt;
                    &lt;/wsp:OneOrMore&gt;
                    &lt;L7p:CommentAssertion&gt;
                        &lt;L7p:Comment stringValue="----------------------------------------------------------------------------------------"/&gt;
                    &lt;/L7p:CommentAssertion&gt;
                    &lt;L7p:CommentAssertion&gt;
                        &lt;L7p:Comment stringValue="              Check on the 'orchestratorTransform' Jolt 'spec'"/&gt;
                    &lt;/L7p:CommentAssertion&gt;
                    &lt;L7p:CommentAssertion&gt;
                        &lt;L7p:Comment stringValue="----------------------------------------------------------------------------------------"/&gt;
                    &lt;/L7p:CommentAssertion&gt;
                    &lt;L7p:EvaluateJsonPathExpression&gt;
                        &lt;L7p:AssertionComment assertionComment="included"&gt;
                            &lt;L7p:Properties mapValue="included"&gt;
                                &lt;L7p:entry&gt;
                                    &lt;L7p:key stringValue="RIGHT.COMMENT"/&gt;
                                    &lt;L7p:value stringValue="Get 'routeList' of the current 'aggregator'"/&gt;
                                &lt;/L7p:entry&gt;
                            &lt;/L7p:Properties&gt;
                        &lt;/L7p:AssertionComment&gt;
                        &lt;L7p:Expression stringValue="$.[*].spec"/&gt;
                        &lt;L7p:OtherTargetMessageVariable stringValue="transformSpecMsg"/&gt;
                        &lt;L7p:Target target="OTHER"/&gt;
                        &lt;L7p:VariablePrefix stringValue="joltSpecs"/&gt;
                    &lt;/L7p:EvaluateJsonPathExpression&gt;
                    &lt;wsp:OneOrMore wsp:Usage="Required"&gt;
                        &lt;L7p:ComparisonAssertion&gt;
                            &lt;L7p:CaseSensitive booleanValue="false"/&gt;
                            &lt;L7p:Expression1 stringValue="${joltSpecs.result}"/&gt;
                            &lt;L7p:Operator operatorNull="null"/&gt;
                            &lt;L7p:Predicates predicates="included"&gt;
                                &lt;L7p:item dataType="included"&gt;
                                    &lt;L7p:Type variableDataType="string"/&gt;
                                &lt;/L7p:item&gt;
                                &lt;L7p:item binary="included"&gt;
                                    &lt;L7p:Negated booleanValue="true"/&gt;
                                    &lt;L7p:RightValue stringValue="null"/&gt;
                                &lt;/L7p:item&gt;
                            &lt;/L7p:Predicates&gt;
                        &lt;/L7p:ComparisonAssertion&gt;
                        &lt;wsp:All wsp:Usage="Required"&gt;
                            &lt;L7p:CustomizeErrorResponse&gt;
                                &lt;L7p:Content stringValueReference="inline"&gt;&lt;![CDATA[{
  "errorMessage" : "Unrecognized data object within the 'orchestrator'.  Expect 'spec' in 'orchestrator_transform'."
}]]&gt;&lt;/L7p:Content&gt;
                                &lt;L7p:ContentType stringValue="application/json"/&gt;
                                &lt;L7p:ExtraHeaders nameValuePairArray="included"/&gt;
                            &lt;/L7p:CustomizeErrorResponse&gt;
                            &lt;L7p:FalseAssertion/&gt;
                        &lt;/wsp:All&gt;
                    &lt;/wsp:OneOrMore&gt;
                    &lt;L7p:CommentAssertion&gt;
                        &lt;L7p:Comment stringValue="------------------End check------------------------------------------------------------"/&gt;
                    &lt;/L7p:CommentAssertion&gt;
                    &lt;L7p:JsonJolt&gt;
                        &lt;L7p:AssertionComment assertionComment="included"&gt;
                            &lt;L7p:Properties mapValue="included"&gt;
                                &lt;L7p:entry&gt;
                                    &lt;L7p:key stringValue="RIGHT.COMMENT"/&gt;
                                    &lt;L7p:value stringValue="APPLY 'orchestratorTransform' to the aggregatedResult"/&gt;
                                &lt;/L7p:entry&gt;
                            &lt;/L7p:Properties&gt;
                        &lt;/L7p:AssertionComment&gt;
                        &lt;L7p:OtherTargetMessageVariable stringValue="aggregatedResult"/&gt;
                        &lt;L7p:SchemaExpression stringValue="${orchestratorTransformSpec}"/&gt;
                        &lt;L7p:Target target="OTHER"/&gt;
                    &lt;/L7p:JsonJolt&gt;
                    &lt;wsp:OneOrMore wsp:Usage="Required"&gt;
                        &lt;wsp:All wsp:Usage="Required"&gt;
                            &lt;L7p:ComparisonAssertion&gt;
                                &lt;L7p:CaseSensitive booleanValue="false"/&gt;
                                &lt;L7p:Expression1 stringValue="${orchestrator.intermediate}"/&gt;
                                &lt;L7p:Operator operatorNull="null"/&gt;
                                &lt;L7p:Predicates predicates="included"&gt;
                                    &lt;L7p:item dataType="included"&gt;
                                    &lt;L7p:Type variableDataType="string"/&gt;
                                    &lt;/L7p:item&gt;
                                    &lt;L7p:item binary="included"&gt;
                                    &lt;L7p:Negated booleanValue="true"/&gt;
                                    &lt;L7p:Operator operator="EMPTY"/&gt;
                                    &lt;L7p:RightValue stringValue=""/&gt;
                                    &lt;/L7p:item&gt;
                                &lt;/L7p:Predicates&gt;
                            &lt;/L7p:ComparisonAssertion&gt;
                            &lt;L7p:SetVariable&gt;
                                &lt;L7p:Base64Expression stringValue="JHtvcmNoZXN0cmF0b3IuaW50ZXJtZWRpYXRlfSwke2FnZ3JlZ2F0ZWRSZXN1bHQubWFpbnBhcnR9"/&gt;
                                &lt;L7p:VariableToSet stringValue="orchestrator.intermediate"/&gt;
                            &lt;/L7p:SetVariable&gt;
                        &lt;/wsp:All&gt;
                        &lt;wsp:All wsp:Usage="Required"&gt;
                            &lt;L7p:SetVariable&gt;
                                &lt;L7p:Base64Expression stringValue="JHthZ2dyZWdhdGVkUmVzdWx0Lm1haW5wYXJ0fQ=="/&gt;
                                &lt;L7p:VariableToSet stringValue="orchestrator.intermediate"/&gt;
                            &lt;/L7p:SetVariable&gt;
                        &lt;/wsp:All&gt;
                    &lt;/wsp:OneOrMore&gt;
                    &lt;L7p:assertionComment&gt;
                        &lt;L7p:Properties mapValue="included"&gt;
                            &lt;L7p:entry&gt;
                                &lt;L7p:key stringValue="RIGHT.COMMENT"/&gt;
                                &lt;L7p:value stringValue="                        Handle 'orchestrator_transform'"/&gt;
                            &lt;/L7p:entry&gt;
                        &lt;/L7p:Properties&gt;
                    &lt;/L7p:assertionComment&gt;
                &lt;/wsp:All&gt;
                &lt;wsp:All wsp:Usage="Required"&gt;
                    &lt;L7p:EvaluateJsonPathExpression&gt;
                        &lt;L7p:Expression stringValue="$.result_transform"/&gt;
                        &lt;L7p:OtherTargetMessageVariable stringValue="aggregatorMsg"/&gt;
                        &lt;L7p:Target target="OTHER"/&gt;
                        &lt;L7p:VariablePrefix stringValue="result_transform"/&gt;
                    &lt;/L7p:EvaluateJsonPathExpression&gt;
                    &lt;L7p:SetVariable&gt;
                        &lt;L7p:Base64Expression stringValue="JHthZ2dyZWdhdG9yTXNnfQ=="/&gt;
                        &lt;L7p:ContentType stringValue="application/json; charset=utf-8"/&gt;
                        &lt;L7p:DataType variableDataType="message"/&gt;
                        &lt;L7p:VariableToSet stringValue="resultTransform"/&gt;
                    &lt;/L7p:SetVariable&gt;
                    &lt;L7p:CommentAssertion&gt;
                        &lt;L7p:Comment stringValue="------------------------------------------------------------------------------"/&gt;
                    &lt;/L7p:CommentAssertion&gt;
                    &lt;L7p:CommentAssertion&gt;
                        &lt;L7p:Comment stringValue="                Handle 'result_transform'"/&gt;
                    &lt;/L7p:CommentAssertion&gt;
                    &lt;L7p:CommentAssertion&gt;
                        &lt;L7p:Comment stringValue="------------------------------------------------------------------------------"/&gt;
                    &lt;/L7p:CommentAssertion&gt;
                    &lt;L7p:JsonJolt&gt;
                        &lt;L7p:AssertionComment assertionComment="included"&gt;
                            &lt;L7p:Properties mapValue="included"&gt;
                                &lt;L7p:entry&gt;
                                    &lt;L7p:key stringValue="RIGHT.COMMENT"/&gt;
                                    &lt;L7p:value stringValue="GET 'orchestratorTransform&amp;quot; from RouteHttp"/&gt;
                                &lt;/L7p:entry&gt;
                            &lt;/L7p:Properties&gt;
                        &lt;/L7p:AssertionComment&gt;
                        &lt;L7p:OtherTargetMessageVariable stringValue="resultTransform"/&gt;
                        &lt;L7p:SchemaExpression stringValueReference="inline"&gt;&lt;![CDATA[[{
  "operation": "shift",
  "spec": {
    "result_transform": {
      "jolt": ""
    }
  }
}]]]&gt;&lt;/L7p:SchemaExpression&gt;
                        &lt;L7p:Target target="OTHER"/&gt;
                    &lt;/L7p:JsonJolt&gt;
                    &lt;L7p:SetVariable&gt;
                        &lt;L7p:Base64Expression stringValue="WyR7b3JjaGVzdHJhdG9yLnJlc3VsdH1d"/&gt;
                        &lt;L7p:ContentType stringValue="application/json; charset=utf-8"/&gt;
                        &lt;L7p:DataType variableDataType="message"/&gt;
                        &lt;L7p:VariableToSet stringValue="orchestratedResult"/&gt;
                    &lt;/L7p:SetVariable&gt;
                    &lt;L7p:SetVariable&gt;
                        &lt;L7p:Base64Expression stringValue="JHtyZXN1bHRUcmFuc2Zvcm0ubWFpbnBhcnR9"/&gt;
                        &lt;L7p:VariableToSet stringValue="resultTransformSpec"/&gt;
                    &lt;/L7p:SetVariable&gt;
                    &lt;L7p:CommentAssertion&gt;
                        &lt;L7p:Comment stringValue="----------------------------------------------------------------------------------------"/&gt;
                    &lt;/L7p:CommentAssertion&gt;
                    &lt;L7p:CommentAssertion&gt;
                        &lt;L7p:Comment stringValue="                 Check 'result_transform' Jolt 'operation'"/&gt;
                    &lt;/L7p:CommentAssertion&gt;
                    &lt;L7p:CommentAssertion&gt;
                        &lt;L7p:Comment stringValue="----------------------------------------------------------------------------------------"/&gt;
                    &lt;/L7p:CommentAssertion&gt;
                    &lt;L7p:SetVariable&gt;
                        &lt;L7p:Base64Expression stringValue="JHtyZXN1bHRUcmFuc2Zvcm1TcGVjfQ=="/&gt;
                        &lt;L7p:ContentType stringValue="application/json; charset=utf-8"/&gt;
                        &lt;L7p:DataType variableDataType="message"/&gt;
                        &lt;L7p:VariableToSet stringValue="transformSpecMsg"/&gt;
                    &lt;/L7p:SetVariable&gt;
                    &lt;L7p:EvaluateJsonPathExpression&gt;
                        &lt;L7p:AssertionComment assertionComment="included"&gt;
                            &lt;L7p:Properties mapValue="included"&gt;
                                &lt;L7p:entry&gt;
                                    &lt;L7p:key stringValue="RIGHT.COMMENT"/&gt;
                                    &lt;L7p:value stringValue="Get 'routeList' of the current 'aggregator'"/&gt;
                                &lt;/L7p:entry&gt;
                            &lt;/L7p:Properties&gt;
                        &lt;/L7p:AssertionComment&gt;
                        &lt;L7p:Expression stringValue="$.[*].operation"/&gt;
                        &lt;L7p:OtherTargetMessageVariable stringValue="transformSpecMsg"/&gt;
                        &lt;L7p:Target target="OTHER"/&gt;
                        &lt;L7p:VariablePrefix stringValue="joltOperations"/&gt;
                    &lt;/L7p:EvaluateJsonPathExpression&gt;
                    &lt;wsp:OneOrMore wsp:Usage="Required"&gt;
                        &lt;L7p:ComparisonAssertion&gt;
                            &lt;L7p:CaseSensitive booleanValue="false"/&gt;
                            &lt;L7p:Expression1 stringValue="${joltOperations.result}"/&gt;
                            &lt;L7p:Operator operatorNull="null"/&gt;
                            &lt;L7p:Predicates predicates="included"&gt;
                                &lt;L7p:item dataType="included"&gt;
                                    &lt;L7p:Type variableDataType="string"/&gt;
                                &lt;/L7p:item&gt;
                                &lt;L7p:item binary="included"&gt;
                                    &lt;L7p:Negated booleanValue="true"/&gt;
                                    &lt;L7p:RightValue stringValue="null"/&gt;
                                &lt;/L7p:item&gt;
                            &lt;/L7p:Predicates&gt;
                        &lt;/L7p:ComparisonAssertion&gt;
                        &lt;wsp:All wsp:Usage="Required"&gt;
                            &lt;L7p:CustomizeErrorResponse&gt;
                                &lt;L7p:Content stringValueReference="inline"&gt;&lt;![CDATA[{
  "errorMessage" : "Unrecognized data object within the 'orchestrator'.  Expect 'operation' in 'result_transform'."
}]]&gt;&lt;/L7p:Content&gt;
                                &lt;L7p:ContentType stringValue="application/json"/&gt;
                                &lt;L7p:ExtraHeaders nameValuePairArray="included"/&gt;
                            &lt;/L7p:CustomizeErrorResponse&gt;
                            &lt;L7p:FalseAssertion/&gt;
                        &lt;/wsp:All&gt;
                    &lt;/wsp:OneOrMore&gt;
                    &lt;L7p:ForEachLoop L7p:Usage="Required"
                        loopVariable="joltOperations.results" variablePrefix="joltOperation"&gt;
                        &lt;L7p:SetVariable&gt;
                            &lt;L7p:Base64Expression stringValue="JHtqb2x0T3BlcmF0aW9uLmN1cnJlbnR9"/&gt;
                            &lt;L7p:VariableToSet stringValue="currentOperation"/&gt;
                        &lt;/L7p:SetVariable&gt;
                        &lt;wsp:OneOrMore wsp:Usage="Required"&gt;
                            &lt;wsp:All wsp:Usage="Required"&gt;
                                &lt;L7p:ComparisonAssertion&gt;
                                    &lt;L7p:CaseSensitive booleanValue="false"/&gt;
                                    &lt;L7p:Expression1 stringValue="${currentOperation}"/&gt;
                                    &lt;L7p:Operator operatorNull="null"/&gt;
                                    &lt;L7p:Predicates predicates="included"&gt;
                                    &lt;L7p:item dataType="included"&gt;
                                    &lt;L7p:Type variableDataType="string"/&gt;
                                    &lt;/L7p:item&gt;
                                    &lt;L7p:item binary="included"&gt;
                                    &lt;L7p:Negated booleanValue="true"/&gt;
                                    &lt;L7p:RightValue stringValue="shift"/&gt;
                                    &lt;/L7p:item&gt;
                                    &lt;L7p:item binary="included"&gt;
                                    &lt;L7p:Negated booleanValue="true"/&gt;
                                    &lt;L7p:RightValue stringValue="default"/&gt;
                                    &lt;/L7p:item&gt;
                                    &lt;L7p:item binary="included"&gt;
                                    &lt;L7p:Negated booleanValue="true"/&gt;
                                    &lt;L7p:RightValue stringValue="remove"/&gt;
                                    &lt;/L7p:item&gt;
                                    &lt;/L7p:Predicates&gt;
                                &lt;/L7p:ComparisonAssertion&gt;
                                &lt;L7p:SetVariable&gt;
                                    &lt;L7p:Base64Expression stringValue="MQ=="/&gt;
                                    &lt;L7p:DataType variableDataType="int"/&gt;
                                    &lt;L7p:VariableToSet stringValue="isInvalidJoltOperation"/&gt;
                                &lt;/L7p:SetVariable&gt;
                                &lt;L7p:SetVariable&gt;
                                    &lt;L7p:Base64Expression stringValue="dHJ1ZQ=="/&gt;
                                    &lt;L7p:VariableToSet stringValue="isInvalidJoltOperation.break"/&gt;
                                &lt;/L7p:SetVariable&gt;
                            &lt;/wsp:All&gt;
                            &lt;L7p:TrueAssertion/&gt;
                        &lt;/wsp:OneOrMore&gt;
                    &lt;/L7p:ForEachLoop&gt;
                    &lt;wsp:OneOrMore wsp:Usage="Required"&gt;
                        &lt;L7p:ComparisonAssertion&gt;
                            &lt;L7p:CaseSensitive booleanValue="false"/&gt;
                            &lt;L7p:Expression1 stringValue="${isInvalidJoltOperation}"/&gt;
                            &lt;L7p:Operator operatorNull="null"/&gt;
                            &lt;L7p:Predicates predicates="included"&gt;
                                &lt;L7p:item dataType="included"&gt;
                                    &lt;L7p:Type variableDataType="int"/&gt;
                                &lt;/L7p:item&gt;
                                &lt;L7p:item binary="included"&gt;
                                    &lt;L7p:RightValue stringValue="0"/&gt;
                                &lt;/L7p:item&gt;
                            &lt;/L7p:Predicates&gt;
                        &lt;/L7p:ComparisonAssertion&gt;
                        &lt;wsp:All wsp:Usage="Required"&gt;
                            &lt;L7p:CustomizeErrorResponse&gt;
                                &lt;L7p:Content stringValueReference="inline"&gt;&lt;![CDATA[{
  "errorMessage" : "Unrecognized data object within the 'orchestrator'.  Expect 'shift', 'default' or 'remove' in 'result_transform' 'operation'."
}]]&gt;&lt;/L7p:Content&gt;
                                &lt;L7p:ContentType stringValue="application/json"/&gt;
                                &lt;L7p:ExtraHeaders nameValuePairArray="included"/&gt;
                            &lt;/L7p:CustomizeErrorResponse&gt;
                            &lt;L7p:FalseAssertion/&gt;
                        &lt;/wsp:All&gt;
                    &lt;/wsp:OneOrMore&gt;
                    &lt;L7p:CommentAssertion&gt;
                        &lt;L7p:Comment stringValue="----------------------------------------------------------------------------------------"/&gt;
                    &lt;/L7p:CommentAssertion&gt;
                    &lt;L7p:CommentAssertion&gt;
                        &lt;L7p:Comment stringValue="              Check on the 'result_transform' Jolt 'spec'"/&gt;
                    &lt;/L7p:CommentAssertion&gt;
                    &lt;L7p:CommentAssertion&gt;
                        &lt;L7p:Comment stringValue="----------------------------------------------------------------------------------------"/&gt;
                    &lt;/L7p:CommentAssertion&gt;
                    &lt;L7p:EvaluateJsonPathExpression&gt;
                        &lt;L7p:AssertionComment assertionComment="included"&gt;
                            &lt;L7p:Properties mapValue="included"&gt;
                                &lt;L7p:entry&gt;
                                    &lt;L7p:key stringValue="RIGHT.COMMENT"/&gt;
                                    &lt;L7p:value stringValue="Get 'routeList' of the current 'aggregator'"/&gt;
                                &lt;/L7p:entry&gt;
                            &lt;/L7p:Properties&gt;
                        &lt;/L7p:AssertionComment&gt;
                        &lt;L7p:Expression stringValue="$.[*].spec"/&gt;
                        &lt;L7p:OtherTargetMessageVariable stringValue="transformSpecMsg"/&gt;
                        &lt;L7p:Target target="OTHER"/&gt;
                        &lt;L7p:VariablePrefix stringValue="joltSpecs"/&gt;
                    &lt;/L7p:EvaluateJsonPathExpression&gt;
                    &lt;wsp:OneOrMore wsp:Usage="Required"&gt;
                        &lt;L7p:ComparisonAssertion&gt;
                            &lt;L7p:CaseSensitive booleanValue="false"/&gt;
                            &lt;L7p:Expression1 stringValue="${joltSpecs.result}"/&gt;
                            &lt;L7p:Operator operatorNull="null"/&gt;
                            &lt;L7p:Predicates predicates="included"&gt;
                                &lt;L7p:item dataType="included"&gt;
                                    &lt;L7p:Type variableDataType="string"/&gt;
                                &lt;/L7p:item&gt;
                                &lt;L7p:item binary="included"&gt;
                                    &lt;L7p:Negated booleanValue="true"/&gt;
                                    &lt;L7p:RightValue stringValue="null"/&gt;
                                &lt;/L7p:item&gt;
                            &lt;/L7p:Predicates&gt;
                        &lt;/L7p:ComparisonAssertion&gt;
                        &lt;wsp:All wsp:Usage="Required"&gt;
                            &lt;L7p:CustomizeErrorResponse&gt;
                                &lt;L7p:Content stringValueReference="inline"&gt;&lt;![CDATA[{
  "errorMessage" : "Unrecognized data object within the 'orchestrator'.  Expect 'spec' in 'result_transform'."
}]]&gt;&lt;/L7p:Content&gt;
                                &lt;L7p:ContentType stringValue="application/json"/&gt;
                                &lt;L7p:ExtraHeaders nameValuePairArray="included"/&gt;
                            &lt;/L7p:CustomizeErrorResponse&gt;
                            &lt;L7p:FalseAssertion/&gt;
                        &lt;/wsp:All&gt;
                    &lt;/wsp:OneOrMore&gt;
                    &lt;L7p:CommentAssertion&gt;
                        &lt;L7p:Comment stringValue="------------------End check------------------------------------------------------------"/&gt;
                    &lt;/L7p:CommentAssertion&gt;
                    &lt;L7p:JsonJolt&gt;
                        &lt;L7p:AssertionComment assertionComment="included"&gt;
                            &lt;L7p:Properties mapValue="included"&gt;
                                &lt;L7p:entry&gt;
                                    &lt;L7p:key stringValue="RIGHT.COMMENT"/&gt;
                                    &lt;L7p:value stringValue="APPLY 'orchestratorTransform' to the aggregatedResult"/&gt;
                                &lt;/L7p:entry&gt;
                            &lt;/L7p:Properties&gt;
                        &lt;/L7p:AssertionComment&gt;
                        &lt;L7p:OtherTargetMessageVariable stringValue="orchestratedResult"/&gt;
                        &lt;L7p:SchemaExpression stringValue="${resultTransformSpec}"/&gt;
                        &lt;L7p:Target target="OTHER"/&gt;
                    &lt;/L7p:JsonJolt&gt;
                    &lt;L7p:SetVariable&gt;
                        &lt;L7p:Base64Expression stringValue="JHtvcmNoZXN0cmF0ZWRSZXN1bHQubWFpbnBhcnR9"/&gt;
                        &lt;L7p:VariableToSet stringValue="orchestrator.result"/&gt;
                    &lt;/L7p:SetVariable&gt;
                    &lt;L7p:SetVariable&gt;
                        &lt;L7p:AssertionComment assertionComment="included"&gt;
                            &lt;L7p:Properties mapValue="included"&gt;
                                &lt;L7p:entry&gt;
                                    &lt;L7p:key stringValue="RIGHT.COMMENT"/&gt;
                                    &lt;L7p:value stringValue="1: means found result_transform"/&gt;
                                &lt;/L7p:entry&gt;
                            &lt;/L7p:Properties&gt;
                        &lt;/L7p:AssertionComment&gt;
                        &lt;L7p:Base64Expression stringValue="MQ=="/&gt;
                        &lt;L7p:DataType variableDataType="int"/&gt;
                        &lt;L7p:VariableToSet stringValue="isResultTransformed"/&gt;
                    &lt;/L7p:SetVariable&gt;
                    &lt;L7p:SetVariable&gt;
                        &lt;L7p:AssertionComment assertionComment="included"&gt;
                            &lt;L7p:Properties mapValue="included"&gt;
                                &lt;L7p:entry&gt;
                                    &lt;L7p:key stringValue="RIGHT.COMMENT"/&gt;
                                    &lt;L7p:value stringValue="result_transform is the last transformation of the orchestration."/&gt;
                                &lt;/L7p:entry&gt;
                            &lt;/L7p:Properties&gt;
                        &lt;/L7p:AssertionComment&gt;
                        &lt;L7p:Base64Expression stringValue="dHJ1ZQ=="/&gt;
                        &lt;L7p:VariableToSet stringValue="aggregatorLoop.break"/&gt;
                    &lt;/L7p:SetVariable&gt;
                    &lt;L7p:assertionComment&gt;
                        &lt;L7p:Properties mapValue="included"&gt;
                            &lt;L7p:entry&gt;
                                &lt;L7p:key stringValue="RIGHT.COMMENT"/&gt;
                                &lt;L7p:value stringValue="                        Handle 'result_transform'"/&gt;
                            &lt;/L7p:entry&gt;
                        &lt;/L7p:Properties&gt;
                    &lt;/L7p:assertionComment&gt;
                &lt;/wsp:All&gt;
                &lt;wsp:All wsp:Usage="Required"&gt;
                    &lt;L7p:CustomizeErrorResponse&gt;
                        &lt;L7p:Content stringValueReference="inline"&gt;&lt;![CDATA[{
  "errorMessage" : "Unrecognized data object within the 'orchestrator':  Expected 'aggregator', 'orchestrator_transform' or 'result_transform'."
}]]&gt;&lt;/L7p:Content&gt;
                        &lt;L7p:ContentType stringValue="application/json"/&gt;
                        &lt;L7p:ExtraHeaders nameValuePairArray="included"/&gt;
                    &lt;/L7p:CustomizeErrorResponse&gt;
                    &lt;L7p:FalseAssertion/&gt;
                    &lt;L7p:assertionComment&gt;
                        &lt;L7p:Properties mapValue="included"&gt;
                            &lt;L7p:entry&gt;
                                &lt;L7p:key stringValue="RIGHT.COMMENT"/&gt;
                                &lt;L7p:value stringValue="                         Handle ERROR if all above failed."/&gt;
                            &lt;/L7p:entry&gt;
                        &lt;/L7p:Properties&gt;
                    &lt;/L7p:assertionComment&gt;
                &lt;/wsp:All&gt;
            &lt;/wsp:OneOrMore&gt;
        &lt;/L7p:ForEachLoop&gt;
        &lt;L7p:CommentAssertion&gt;
            &lt;L7p:Comment stringValue="------------------------------------------------------------------------------"/&gt;
        &lt;/L7p:CommentAssertion&gt;
        &lt;wsp:OneOrMore wsp:Usage="Required"&gt;
            &lt;wsp:All wsp:Usage="Required"&gt;
                &lt;L7p:ComparisonAssertion&gt;
                    &lt;L7p:CaseSensitive booleanValue="false"/&gt;
                    &lt;L7p:Expression1 stringValue="${isResultTransformed}"/&gt;
                    &lt;L7p:Operator operatorNull="null"/&gt;
                    &lt;L7p:Predicates predicates="included"&gt;
                        &lt;L7p:item dataType="included"&gt;
                            &lt;L7p:Type variableDataType="int"/&gt;
                        &lt;/L7p:item&gt;
                        &lt;L7p:item binary="included"&gt;
                            &lt;L7p:RightValue stringValue="0"/&gt;
                        &lt;/L7p:item&gt;
                    &lt;/L7p:Predicates&gt;
                &lt;/L7p:ComparisonAssertion&gt;
                &lt;L7p:ComparisonAssertion&gt;
                    &lt;L7p:CaseSensitive booleanValue="false"/&gt;
                    &lt;L7p:Expression1 stringValue="${isNonJson}"/&gt;
                    &lt;L7p:Operator operatorNull="null"/&gt;
                    &lt;L7p:Predicates predicates="included"&gt;
                        &lt;L7p:item dataType="included"&gt;
                            &lt;L7p:Type variableDataType="int"/&gt;
                        &lt;/L7p:item&gt;
                        &lt;L7p:item binary="included"&gt;
                            &lt;L7p:RightValue stringValue="0"/&gt;
                        &lt;/L7p:item&gt;
                    &lt;/L7p:Predicates&gt;
                &lt;/L7p:ComparisonAssertion&gt;
                &lt;L7p:SetVariable&gt;
                    &lt;L7p:Base64Expression stringValue="WyR7b3JjaGVzdHJhdG9yLnJlc3VsdH1d"/&gt;
                    &lt;L7p:VariableToSet stringValue="responseMessage"/&gt;
                &lt;/L7p:SetVariable&gt;
            &lt;/wsp:All&gt;
            &lt;wsp:All wsp:Usage="Required"&gt;
                &lt;L7p:SetVariable&gt;
                    &lt;L7p:Base64Expression stringValue="JHtvcmNoZXN0cmF0b3IucmVzdWx0fQ=="/&gt;
                    &lt;L7p:VariableToSet stringValue="responseMessage"/&gt;
                &lt;/L7p:SetVariable&gt;
            &lt;/wsp:All&gt;
            &lt;wsp:All wsp:Usage="Required"&gt;
                &lt;L7p:CustomizeErrorResponse&gt;
                    &lt;L7p:Content stringValueReference="inline"&gt;&lt;![CDATA[{
  "errorMessage" : "Unrecognized data object within the 'orchestrator': ${aggregatorMsg}"
}]]&gt;&lt;/L7p:Content&gt;
                    &lt;L7p:ContentType stringValue="application/json"/&gt;
                    &lt;L7p:ExtraHeaders nameValuePairArray="included"/&gt;
                &lt;/L7p:CustomizeErrorResponse&gt;
                &lt;L7p:FalseAssertion/&gt;
            &lt;/wsp:All&gt;
        &lt;/wsp:OneOrMore&gt;
        &lt;L7p:HardcodedResponse&gt;
            &lt;L7p:Base64ResponseBody stringValue="JHtyZXNwb25zZU1lc3NhZ2V9Cg=="/&gt;
            &lt;L7p:EarlyResponse booleanValue="true"/&gt;
            &lt;L7p:ResponseContentType stringValue="${response.ContentType}"/&gt;
        &lt;/L7p:HardcodedResponse&gt;
    &lt;/wsp:All&gt;
&lt;/wsp:Policy&gt;
</l7:Resource>
</l7:ResourceSet>
                            </l7:Resources>
                        </l7:Policy>
                    </l7:Resource>
                </l7:Item>
                <l7:Item>
                    <l7:Name>custom_RouteOrchestrator</l7:Name>
                    <l7:Id>28ea4ca03442ebdf29e955290e93c97e</l7:Id>
                    <l7:Type>ENCAPSULATED_ASSERTION</l7:Type>
                    <l7:TimeStamp>2017-10-11T22:51:27.866Z</l7:TimeStamp>
                    <l7:Resource>
                        <l7:EncapsulatedAssertion id="28ea4ca03442ebdf29e955290e93c97e" version="1">
                            <l7:Name>custom_RouteOrchestrator</l7:Name>
                            <l7:Guid>5aee7060-fe9f-464d-8c1f-a61632a89265</l7:Guid>
                            <l7:PolicyReference id="28ea4ca03442ebdf29e955290e93c968" resourceUri="http://ns.l7tech.com/2010/04/gateway-management/policies"/>
                            <l7:EncapsulatedArguments>
<l7:EncapsulatedAssertionArgument>
    <l7:Ordinal>1</l7:Ordinal>
    <l7:ArgumentName>rule</l7:ArgumentName>
    <l7:ArgumentType>string</l7:ArgumentType>
    <l7:GuiLabel>rule</l7:GuiLabel>
    <l7:GuiPrompt>true</l7:GuiPrompt>
</l7:EncapsulatedAssertionArgument>
<l7:EncapsulatedAssertionArgument>
    <l7:Ordinal>2</l7:Ordinal>
    <l7:ArgumentName>primaryRoute</l7:ArgumentName>
    <l7:ArgumentType>string</l7:ArgumentType>
    <l7:GuiPrompt>false</l7:GuiPrompt>
</l7:EncapsulatedAssertionArgument>
<l7:EncapsulatedAssertionArgument>
    <l7:Ordinal>3</l7:Ordinal>
    <l7:ArgumentName>secondaryRoute</l7:ArgumentName>
    <l7:ArgumentType>string</l7:ArgumentType>
    <l7:GuiPrompt>false</l7:GuiPrompt>
</l7:EncapsulatedAssertionArgument>
<l7:EncapsulatedAssertionArgument>
    <l7:Ordinal>4</l7:Ordinal>
    <l7:ArgumentName>failoverRoute</l7:ArgumentName>
    <l7:ArgumentType>string</l7:ArgumentType>
    <l7:GuiPrompt>false</l7:GuiPrompt>
</l7:EncapsulatedAssertionArgument>
                            </l7:EncapsulatedArguments>
                            <l7:EncapsulatedResults>
<l7:EncapsulatedAssertionResult>
    <l7:ResultName>responseMessage</l7:ResultName>
    <l7:ResultType>string</l7:ResultType>
</l7:EncapsulatedAssertionResult>
                            </l7:EncapsulatedResults>
                            <l7:Properties>
<l7:Property key="allowTracing">
    <l7:StringValue>true</l7:StringValue>
</l7:Property>
<l7:Property key="paletteFolder">
    <l7:StringValue>xml</l7:StringValue>
</l7:Property>
<l7:Property key="passMetricsToParent">
    <l7:StringValue>false</l7:StringValue>
</l7:Property>
<l7:Property key="policyGuid">
    <l7:StringValue>bbf8e106-a03c-43f6-9989-a530bf365969</l7:StringValue>
</l7:Property>
                            </l7:Properties>
                        </l7:EncapsulatedAssertion>
                    </l7:Resource>
                </l7:Item>
            </l7:References>
            <l7:Mappings>
                <l7:Mapping action="NewOrExisting" srcId="3237bb87c133b82ff09f4a0b3d90a6df" srcUri="/1.0/serverModuleFiles/3237bb87c133b82ff09f4a0b3d90a6df" type="SERVER_MODULE_FILE">
                    <l7:Properties>
                        <l7:Property key="MapBy">
                            <l7:StringValue>moduleSha256</l7:StringValue>
                        </l7:Property>
                    </l7:Properties>
                </l7:Mapping>
                <l7:Mapping action="NewOrExisting" srcId="00000000000000000000000000000002:SSL" srcUri="/1.0/privateKeys/00000000000000000000000000000002:SSL" type="SSG_KEY_ENTRY">
                    <l7:Properties>
                        <l7:Property key="FailOnNew">
                            <l7:BooleanValue>true</l7:BooleanValue>
                        </l7:Property>
                    </l7:Properties>
                </l7:Mapping>
                <l7:Mapping action="NewOrExisting" srcId="d1bf78b539c944534cc5d33d1ff4fc64" srcUri="/1.0/folders/d1bf78b539c944534cc5d33d1ff4fc64" type="FOLDER">
                    <l7:Properties>
                        <l7:Property key="FailOnNew">
                            <l7:BooleanValue>true</l7:BooleanValue>
                        </l7:Property>
                    </l7:Properties>
                </l7:Mapping>
                <l7:Mapping action="NewOrExisting" srcId="28ea4ca03442ebdf29e955290e93c968" srcUri="/1.0/policies/28ea4ca03442ebdf29e955290e93c968" type="POLICY"/>
                <l7:Mapping action="NewOrExisting" srcId="28ea4ca03442ebdf29e955290e93c97e" srcUri="/1.0/encapsulatedAssertions/28ea4ca03442ebdf29e955290e93c97e" type="ENCAPSULATED_ASSERTION"/>
            </l7:Mappings>
        </l7:Bundle>