apiVersion: v1
kind: Template
metadata:
  name: msgw-template
  labels:
    name: msgw
  annotations:
    description: Template for Microservices Gateway
objects:
  - apiVersion: v1
    kind: ImageStream
    metadata:
      annotations:
        description: Microservices Gateway image stream
        openshift.io/image.insecureRepository: false
      labels:
        name: msgw
      name: msgw-is
    spec:
      tags:
      - annotations:
        from:
          kind: DockerImage
          name: "caapim/microgateway:1.0.0-CR01"
        name: "1.0.0-CR01"
        importPolicy:
          scheduled: true
          insecure: false
  - apiVersion: v1
    kind: Service
    metadata:
      labels:
        name: msgw
        service: msgw-svc
      name: msgw-svc
      annotations:
        description: "The Microservices Gateway service"
    spec:
      ports:
        - port: 8080
          targetPort: 8080
          protocol: TCP
          name: msgw-http-port
        - port: 8443
          targetPort: 8443
          protocol: TCP
          name: msgw-https-port
        - port: 9443
          targetPort: 9443
          protocol: TCP
          name: msgw-pm-port
      selector:
        name: msgw
      type: ClusterIP

  - apiVersion: v1
    kind: Route
    metadata:
      labels:
        name: msgw
      name: msgw-https-route
      annotations:
        description: "The route to expose the Microservices Gateway's HTTPS port"
    spec:
      host: microgateway.mycompany.com
      to:
        kind: Service
        name: msgw-svc
      port:
        targetPort: msgw-https-port
      tls:
        termination: passthrough
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      name: msgw-dc
      labels:
        name: msgw
      annotations:
        description: "The Microservices Gateway deployment configuration"
    spec:
      strategy:
        type: Rolling
        rollingParams:
          timeoutSeconds: 900
      triggers:
        - type: ConfigChange
        - type: ImageChange
          imageChangeParams:
            automatic: true
            containerNames:
              - msgw-container
            from:
              kind: ImageStreamTag
              name: "msgw-is:1.0.0-CR01"
      replicas: 1
      selector:
        name: msgw
        deploymentconfig: msgw-dc
      template:
        metadata:
          labels:
            name: msgw
            deploymentconfig: msgw-dc
        spec:
          containers:
            - name: msgw-container
              image: "microgateway:1.0.0-CR01"
              imagePullPolicy: Always
              terminationMessagePath: /dev/termination-log
              ports:
                - containerPort: 8080
                - containerPort: 8443
                - containerPort: 9443
              envFrom:
              - secretRef:
                  name: msgw-secrets
              - configMapRef:
                  name: microgateway-core
              - configMapRef:
                  name: microgateway-license
              - configMapRef:
                  name: microgateway-otk
              - configMapRef:
                  name: microgateway-policysdk
              - configMapRef:
                  name: microgateway-quickstartconfig
              readinessProbe:
                exec:
                  command: [sh, /opt/docker/rc.d/diagnostic/health_check.sh]
                initialDelaySeconds: 90
                timeoutSeconds: 1
                periodSeconds: 15
                successThreshold: 1
              livenessProbe:
                exec:
                  command: [sh, /opt/docker/rc.d/diagnostic/health_check.sh]
                initialDelaySeconds: 480
                timeoutSeconds: 1
                periodSeconds: 15
                successThreshold: 1
          dnsPolicy: ClusterFirst
          restartPolicy: Always
          securityContext: {}
          terminationGracePeriodSeconds: 60
          volumes:
          - emptyDir: {}
            name: db
        test: false
      status: {}
